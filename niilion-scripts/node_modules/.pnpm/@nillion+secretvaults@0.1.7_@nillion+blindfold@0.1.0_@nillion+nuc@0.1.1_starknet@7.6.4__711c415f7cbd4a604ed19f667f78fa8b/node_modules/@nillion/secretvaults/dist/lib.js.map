{"version":3,"sources":["../src/builder.ts","../src/common/cluster.ts","../src/common/blindfold.ts","../src/logger.ts","../src/base.ts","../src/common/utils.ts","../src/common/nuc-cmd.ts","../src/common/types.ts","../src/nildb/builder-client.ts","../src/common/paths.ts","../src/dto/builders.dto.ts","../src/dto/common.ts","../src/dto/collections.dto.ts","../src/dto/data.dto.ts","../src/dto/users.dto.ts","../src/dto/queries.dto.ts","../src/nildb/base-client.ts","../src/dto/system.dto.ts","../src/user.ts","../src/nildb/user-client.ts"],"sourcesContent":["import {\n  type Command,\n  InvocationBody,\n  type Keypair,\n  NilauthClient,\n  type Did as NucDid,\n  NucTokenBuilder,\n  type NucTokenEnvelope,\n  PayerBuilder,\n  type SubscriptionStatusResponse,\n} from \"@nillion/nuc\";\nimport { SecretVaultBaseClient, type SecretVaultBaseOptions } from \"#/base\";\nimport { intoSecondsFromNow } from \"#/common/utils\";\nimport { Log } from \"#/logger\";\nimport {\n  type BlindfoldFactoryConfig,\n  toBlindfoldKey,\n} from \"./common/blindfold\";\nimport {\n  executeOnCluster,\n  prepareRequest,\n  processConcealedListResponse,\n  processPlaintextResponse,\n} from \"./common/cluster\";\nimport { NucCmd } from \"./common/nuc-cmd\";\nimport { type ByNodeName, Did, type Uuid } from \"./common/types\";\nimport type {\n  DeleteBuilderResponse,\n  ReadBuilderProfileResponse,\n  RegisterBuilderRequest,\n  RegisterBuilderResponse,\n  UpdateBuilderProfileRequest,\n  UpdateBuilderProfileResponse,\n} from \"./dto/builders.dto\";\nimport type {\n  CreateCollectionIndexRequest,\n  CreateCollectionIndexResponse,\n  CreateCollectionRequest,\n  CreateCollectionResponse,\n  DeleteCollectionResponse,\n  DropCollectionIndexResponse,\n  ListCollectionsResponse,\n  ReadCollectionMetadataResponse,\n} from \"./dto/collections.dto\";\nimport type { Name } from \"./dto/common\";\nimport type {\n  CreateDataResponse,\n  CreateStandardDataRequest,\n  DeleteDataRequest,\n  DeleteDataResponse,\n  FindDataRequest,\n  FindDataResponse,\n  FlushDataResponse,\n  TailDataResponse,\n  UpdateDataRequest,\n  UpdateDataResponse,\n} from \"./dto/data.dto\";\nimport type {\n  CreateQueryRequest,\n  CreateQueryResponse,\n  DeleteQueryResponse,\n  ReadQueriesResponse,\n  ReadQueryResponse,\n  ReadQueryRunByIdResponse,\n  RunQueryRequest,\n  RunQueryResponse,\n} from \"./dto/queries.dto\";\nimport {\n  createNilDbBuilderClient,\n  type NilDbBuilderClient,\n} from \"./nildb/builder-client\";\n\n/**\n *\n */\nexport type SecretVaultBuilderOptions =\n  SecretVaultBaseOptions<NilDbBuilderClient> & {\n    nilauthClient: NilauthClient;\n  };\n\n/**\n * Client for performing builder operations on SecretVaults.\n *\n * This client handles all builder-specific operations including registration,\n * collection management, data operations, and query execution. It supports\n * automatic handling of concealed data when configured with blindfold.\n *\n * @example\n * ```typescript\n * const client = await SecretVaultBuilderClient.from({\n *   keypair: myKeypair,\n *   urls: {\n *     chain: \"http://rpc.testnet.nilchain-rpc-proxy.nilogy.xyz\",\n *     auth: \"https://nilauth.sandbox.app-cluster.sandbox.nilogy.xyz\",\n *     dbs: [\"https://nildb-stg-n1.nillion.network\", \"https://nildb-stg-n2.nillion.network\", \"https://nildb-stg-n3.nillion.network\"]\n *   }\n * });\n * ```\n */\nexport class SecretVaultBuilderClient extends SecretVaultBaseClient<NilDbBuilderClient> {\n  /**\n   * Creates and initializes a new SecretVaultBuilderClient instance.\n   *\n   * @param options - Configuration options for the client\n   * @param options.keypair - The builder's keypair for authentication\n   * @param options.urls - Nillion service URLs configuration from https://docs.nillion.com/build/network-config\n   * @param options.urls.chain - URL of the nilChain URL\n   * @param options.urls.auth - URL of the nilAuth authentication service\n   * @param options.urls.dbs - URL Array of nilDB node endpoints\n   * @param options.blindfold - Optional blindfold configuration for concealed data\n   * @returns A promise that resolves to a configured SecretVaultBuilderClient\n   *\n   * @example\n   * ```typescript\n   * const client = await SecretVaultBuilderClient.from({\n   *   keypair: myKeypair,\n   *   urls: {\n   *     chain: \"http://rpc.testnet.nilchain-rpc-proxy.nilogy.xyz\",\n   *     auth: \"https://nilauth.sandbox.app-cluster.sandbox.nilogy.xyz\",\n   *     dbs: [\"https://nildb-stg-n1.nillion.network\", \"https://nildb-stg-n2.nillion.network\", \"https://nildb-stg-n3.nillion.network\"]\n   *   },\n   *   blindfold: {\n   *     // optional blindfold config\n   *   }\n   * });\n   * ```\n   */\n  static async from(options: {\n    keypair: Keypair;\n    urls: {\n      chain: string;\n      auth: string;\n      dbs: string[];\n    };\n    blindfold?: BlindfoldFactoryConfig;\n  }): Promise<SecretVaultBuilderClient> {\n    const { urls, keypair, blindfold } = options;\n\n    Log.debug(\n      {\n        did: keypair.toDid().toString(),\n        dbCount: urls.dbs.length,\n        blindfold: !!blindfold,\n      },\n      \"Creating SecretVaultBuilderClient\",\n    );\n\n    const payerBuilder = await new PayerBuilder()\n      .keypair(keypair)\n      .chainUrl(urls.chain)\n      .build();\n    const nilauthClient = await NilauthClient.from(urls.auth, payerBuilder);\n\n    // Create clients for each node\n    const clientPromises = urls.dbs.map((base) =>\n      createNilDbBuilderClient(base),\n    );\n    const clients = await Promise.all(clientPromises);\n\n    let client: SecretVaultBuilderClient;\n    if (blindfold) {\n      if (\"key\" in blindfold) {\n        // User provided a key\n        client = new SecretVaultBuilderClient({\n          clients,\n          keypair,\n          key: blindfold.key,\n          nilauthClient,\n        });\n      } else {\n        // Create a new key\n        const key = await toBlindfoldKey({\n          ...blindfold,\n          clusterSize: clients.length,\n        });\n\n        client = new SecretVaultBuilderClient({\n          clients,\n          keypair,\n          key,\n          nilauthClient,\n        });\n      }\n    } else {\n      // No encryption\n      client = new SecretVaultBuilderClient({\n        clients,\n        keypair,\n        nilauthClient,\n      });\n    }\n\n    Log.info(\n      {\n        id: keypair.toDid().toString().slice(-8),\n        nodes: clients.length,\n        encryption: client._options.key?.constructor.name ?? \"none\",\n      },\n      \"SecretVaultBuilderClient created\",\n    );\n\n    return client;\n  }\n\n  #rootToken: NucTokenEnvelope | null = null;\n  #nilauthClient: NilauthClient;\n\n  constructor(options: SecretVaultBuilderOptions) {\n    super(options);\n    this.#nilauthClient = options.nilauthClient;\n  }\n\n  get rootToken(): NucTokenEnvelope {\n    if (!this.#rootToken) {\n      throw new Error(\"`refreshRootToken` must be called first\");\n    }\n    return this.#rootToken;\n  }\n\n  /**\n   * Fetches a new root NUC token from the configured nilAuth server.\n   */\n  async refreshRootToken(): Promise<void> {\n    Log.debug(\"Refreshing root token\");\n    const { token } = await this.#nilauthClient.requestToken(\n      this._options.keypair,\n      \"nildb\",\n    );\n\n    this.#rootToken = token;\n    Log.info({ builder: this.id }, \"Root token refreshed\");\n  }\n\n  /**\n   * Checks subscription status by the builder's Did.\n   */\n  subscriptionStatus(): Promise<SubscriptionStatusResponse> {\n    return this.#nilauthClient.subscriptionStatus(\n      this.keypair.publicKey(\"hex\"),\n      \"nildb\",\n    );\n  }\n\n  /**\n   * Registers the builder with all nodes in the cluster.\n   */\n  async register(\n    body: RegisterBuilderRequest,\n  ): Promise<ByNodeName<RegisterBuilderResponse>> {\n    const result = await executeOnCluster(this.nodes, (c) => c.register(body));\n    Log.info({ builder: this.id }, \"Builder registered\");\n    return result;\n  }\n\n  /**\n   * Reads the builder's profile from the cluster.\n   */\n  async readProfile(): Promise<ReadBuilderProfileResponse> {\n    const resultsByNode = await executeOnCluster(this.nodes, (client) => {\n      const token = this.mintRootInvocation({\n        audience: client.id,\n        command: NucCmd.nil.db.builders.read,\n      });\n\n      return client.readProfile(token);\n    });\n\n    const result = processPlaintextResponse(resultsByNode);\n    Log.info({ builder: this.id }, \"Builder profile read\");\n    return result;\n  }\n\n  /**\n   * Updates the builder's profile on all nodes.\n   */\n  async updateBuilderProfile(\n    body: UpdateBuilderProfileRequest,\n  ): Promise<ByNodeName<UpdateBuilderProfileResponse>> {\n    const result = await executeOnCluster(this.nodes, (client) => {\n      const token = this.mintRootInvocation({\n        audience: client.id,\n        command: NucCmd.nil.db.builders.update,\n      });\n\n      return client.updateProfile(token, body);\n    });\n\n    Log.info(\n      { builder: this.id, updateFields: Object.keys(body) },\n      \"Builder profile updated\",\n    );\n    return result;\n  }\n\n  /**\n   * Deletes the builder and associated resources from all nodes.\n   */\n  async deleteBuilder(): Promise<ByNodeName<DeleteBuilderResponse>> {\n    const result = await executeOnCluster(this.nodes, (client) => {\n      const token = this.mintRootInvocation({\n        audience: client.id,\n        command: NucCmd.nil.db.builders.delete,\n      });\n\n      return client.deleteBuilder(token);\n    });\n\n    Log.info({ builder: this.id }, \"Builder deleted\");\n    return result;\n  }\n\n  /**\n   * Creates a new collection on all nodes.\n   */\n  async createCollection(\n    body: CreateCollectionRequest,\n  ): Promise<ByNodeName<CreateCollectionResponse>> {\n    const result = await executeOnCluster(this.nodes, (client) => {\n      const token = this.mintRootInvocation({\n        audience: client.id,\n        command: NucCmd.nil.db.collections.create,\n      });\n\n      return client.createCollection(token, body);\n    });\n\n    Log.info({ builder: this.id, collection: body.name }, \"Collection created\");\n    return result;\n  }\n\n  /**\n   * Reads a list of all collections from the cluster.\n   */\n  async readCollections(): Promise<ListCollectionsResponse> {\n    const resultsByNode = await executeOnCluster(this.nodes, (client) => {\n      const token = this.mintRootInvocation({\n        audience: client.id,\n        command: NucCmd.nil.db.collections.read,\n      });\n\n      return client.readCollections(token);\n    });\n\n    const result = processPlaintextResponse(resultsByNode);\n\n    Log.info(\n      {\n        builder: this.id,\n        count: result.data?.length || 0,\n      },\n      \"Collections read\",\n    );\n\n    return result;\n  }\n\n  /**\n   * Reads the metadata for a single collection.\n   */\n  async readCollection(\n    collection: Uuid,\n  ): Promise<ReadCollectionMetadataResponse> {\n    const resultsByNode = await executeOnCluster(this.nodes, (client) => {\n      const token = this.mintRootInvocation({\n        audience: client.id,\n        command: NucCmd.nil.db.collections.read,\n      });\n\n      return client.readCollection(token, collection);\n    });\n\n    const result = processPlaintextResponse(resultsByNode);\n\n    Log.info({ builder: this.id, collection }, \"Collection metadata read\");\n    return result;\n  }\n\n  /**\n   * Deletes a collection its data from all nodes.\n   */\n  async deleteCollection(\n    collection: Uuid,\n  ): Promise<ByNodeName<DeleteCollectionResponse>> {\n    const result = await executeOnCluster(this.nodes, (client) => {\n      const token = this.mintRootInvocation({\n        audience: client.id,\n        command: NucCmd.nil.db.collections.delete,\n      });\n\n      return client.deleteCollection(token, collection);\n    });\n\n    Log.info({ builder: this.id, collection }, \"Collection deleted\");\n    return result;\n  }\n\n  /**\n   * Creates a new index on a collection.\n   */\n  async createCollectionIndex(\n    collection: Uuid,\n    body: CreateCollectionIndexRequest,\n  ): Promise<ByNodeName<CreateCollectionIndexResponse>> {\n    const result = await executeOnCluster(this.nodes, (client) => {\n      const token = this.mintRootInvocation({\n        audience: client.id,\n        command: NucCmd.nil.db.collections.update,\n      });\n\n      return client.createCollectionIndex(token, collection, body);\n    });\n\n    Log.info(\n      {\n        builder: this.id,\n        collection,\n        name: body.name,\n      },\n      \"Collection index created\",\n    );\n\n    return result;\n  }\n\n  /**\n   * Drops an index from a collection.\n   */\n  async dropCollectionIndex(\n    collection: Uuid,\n    index: Name,\n  ): Promise<ByNodeName<DropCollectionIndexResponse>> {\n    const result = await executeOnCluster(this.nodes, (client) => {\n      const token = this.mintRootInvocation({\n        audience: client.id,\n        command: NucCmd.nil.db.collections.update,\n      });\n\n      return client.dropCollectionIndex(token, collection, index);\n    });\n\n    Log.info(\n      {\n        builder: this.id,\n        collection,\n        index,\n      },\n      \"Collection index dropped\",\n    );\n\n    return result;\n  }\n\n  /**\n   * Creates one or more standard data documents in a collection.\n   */\n  async createStandardData(options: {\n    body: CreateStandardDataRequest;\n    delegation?: string;\n  }): Promise<ByNodeName<CreateDataResponse>> {\n    const { body, delegation } = options;\n    const { key, clients } = this._options;\n\n    const nodePayloads = await prepareRequest({ key, clients, body });\n\n    const result = await executeOnCluster(this.nodes, (client) => {\n      let token = delegation;\n      if (!token) {\n        token = this.mintRootInvocation({\n          audience: client.id,\n          command: NucCmd.nil.db.data.create,\n        });\n      }\n\n      const id = Did.parse(client.id.toString());\n      const payload = nodePayloads[id];\n      return client.createStandardData(token, payload);\n    });\n\n    Log.info(\n      {\n        collection: body.collection,\n        count: body.data.length,\n        builder: this.id,\n        isConcealed: !!key,\n      },\n      \"Data created\",\n    );\n\n    return result;\n  }\n\n  /**\n   * Retrieves a list of all saved queries.\n   */\n  async getQueries(): Promise<ByNodeName<ReadQueriesResponse>> {\n    const result = await executeOnCluster(this.nodes, async (client) => {\n      const token = this.mintRootInvocation({\n        audience: client.id,\n        command: NucCmd.nil.db.queries.read,\n      });\n\n      return client.getQueries(token);\n    });\n\n    Log.info({ builder: this.id }, \"Queries read\");\n    return result;\n  }\n\n  /**\n   * Retrieves a single saved query by its id.\n   */\n  async getQuery(query: Uuid): Promise<ByNodeName<ReadQueryResponse>> {\n    const result = await executeOnCluster(this.nodes, async (client) => {\n      const token = this.mintRootInvocation({\n        audience: client.id,\n        command: NucCmd.nil.db.queries.read,\n      });\n\n      return client.getQuery(token, query);\n    });\n\n    Log.info({ query, builder: this.id }, \"Query read\");\n    return result;\n  }\n\n  /**\n   * Creates a new saved query on all nodes.\n   */\n  async createQuery(\n    body: CreateQueryRequest,\n  ): Promise<ByNodeName<CreateQueryResponse>> {\n    const result = await executeOnCluster(this.nodes, async (client) => {\n      const token = this.mintRootInvocation({\n        audience: client.id,\n        command: NucCmd.nil.db.queries.create,\n      });\n\n      return client.createQuery(token, body);\n    });\n\n    Log.info(\n      {\n        builder: this.id,\n        name: body.name,\n        id: body._id,\n        collection: body.collection,\n      },\n      \"Created query\",\n    );\n\n    return result;\n  }\n\n  /**\n   * Deletes a saved query from all nodes.\n   */\n  async deleteQuery(query: Uuid): Promise<ByNodeName<DeleteQueryResponse>> {\n    const result = await executeOnCluster(this.nodes, async (client) => {\n      const token = this.mintRootInvocation({\n        audience: client.id,\n        command: NucCmd.nil.db.queries.delete,\n      });\n\n      return client.deleteQuery(token, query);\n    });\n\n    Log.info({ builder: this.id, query }, \"Query deleted\");\n    return result;\n  }\n\n  /**\n   * Starts a query execution job.\n   */\n  async runQuery(body: RunQueryRequest): Promise<ByNodeName<RunQueryResponse>> {\n    const result = await executeOnCluster(this.nodes, async (client) => {\n      const token = this.mintRootInvocation({\n        audience: client.id,\n        command: NucCmd.nil.db.queries.execute,\n      });\n\n      return client.runQuery(token, body);\n    });\n\n    Log.info(\n      {\n        builder: this.id,\n        query: body._id,\n        run: Object.values(result)[0]?.data,\n      },\n      \"Started query run\",\n    );\n    return result;\n  }\n\n  /**\n   * Reads the results of a completed query run from each node.\n   */\n  readQueryRunResults(\n    runs: ByNodeName<Uuid>,\n  ): Promise<ByNodeName<ReadQueryRunByIdResponse>> {\n    return executeOnCluster(this.nodes, async (client) => {\n      const token = this.mintRootInvocation({\n        audience: client.id,\n        command: NucCmd.nil.db.queries.read,\n      });\n\n      const id = Did.parse(client.id.toString());\n      const run = runs[id];\n      return client.readQueryRunResults(token, run);\n    });\n  }\n\n  /**\n   * Finds data in a collection, revealing concealed values if a key is configured.\n   */\n  async findData(body: FindDataRequest): Promise<FindDataResponse> {\n    const resultsByNode = await executeOnCluster(this.nodes, (client) => {\n      const token = this.mintRootInvocation({\n        audience: client.id,\n        command: NucCmd.nil.db.data.read,\n      });\n\n      return client.findData(token, body);\n    });\n\n    const { key } = this._options;\n    let result: FindDataResponse;\n\n    if (key) {\n      const data = await processConcealedListResponse({ key, resultsByNode });\n      result = { data };\n    } else {\n      result = processPlaintextResponse(resultsByNode);\n    }\n\n    Log.info(\n      {\n        builder: this.id,\n        collection: body.collection,\n        count: result.data?.length || 0,\n      },\n      \"Data found\",\n    );\n\n    return result;\n  }\n\n  /**\n   * Updates documents in a collection, concealing the update payload if a key is configured.\n   */\n  async updateData(\n    body: UpdateDataRequest,\n  ): Promise<ByNodeName<UpdateDataResponse>> {\n    const { key, clients } = this._options;\n\n    const nodePayloads = await prepareRequest({ key, clients, body });\n    const result = await executeOnCluster(this.nodes, (client) => {\n      const token = this.mintRootInvocation({\n        audience: client.id,\n        command: NucCmd.nil.db.data.update,\n      });\n\n      const id = client.id.toString() as Did;\n      return client.updateData(token, nodePayloads[id]);\n    });\n\n    Log.info(\n      {\n        builder: this.id,\n        collection: body.collection,\n        filter: body.filter,\n      },\n      \"Data updated\",\n    );\n\n    return result;\n  }\n\n  /**\n   * Deletes data from a collection based on a filter.\n   */\n  async deleteData(\n    body: DeleteDataRequest,\n  ): Promise<ByNodeName<DeleteDataResponse>> {\n    const result = await executeOnCluster(this.nodes, async (client) => {\n      const token = this.mintRootInvocation({\n        audience: client.id,\n        command: NucCmd.nil.db.data.delete,\n      });\n\n      return client.deleteData(token, body);\n    });\n\n    Log.info(\n      {\n        builder: this.id,\n        collection: body.collection,\n        filter: body.filter,\n      },\n      \"Data deleted\",\n    );\n\n    return result;\n  }\n\n  /**\n   * Deletes all data from a collection.\n   */\n  async flushData(collection: Uuid): Promise<ByNodeName<FlushDataResponse>> {\n    const result = await executeOnCluster(this.nodes, async (client) => {\n      const token = this.mintRootInvocation({\n        audience: client.id,\n        command: NucCmd.nil.db.data.delete,\n      });\n\n      return client.flushData(token, collection);\n    });\n\n    Log.info({ collection }, \"Flushed data\");\n    return result;\n  }\n\n  /**\n   * Reads the last N documents from a collection, revealing concealed values if a key is configured.\n   */\n  async tailData(collection: Uuid, limit = 10): Promise<TailDataResponse> {\n    Log.debug({ collection, limit }, \"Tailing data\");\n\n    const resultsByNode = await executeOnCluster(this.nodes, (client) => {\n      const token = this.mintRootInvocation({\n        audience: client.id,\n        command: NucCmd.nil.db.data.read,\n      });\n      return client.tailData(token, collection, limit);\n    });\n\n    const { key } = this._options;\n    let result: TailDataResponse;\n\n    if (key) {\n      const data = await processConcealedListResponse({ key, resultsByNode });\n      result = { data };\n    } else {\n      result = processPlaintextResponse(resultsByNode);\n    }\n\n    Log.info({ collection, count: result.data?.length || 0 }, \"Data tailed\");\n\n    return result;\n  }\n\n  private mintRootInvocation(options: {\n    audience: NucDid;\n    command: Command;\n  }): string {\n    return NucTokenBuilder.extending(this.rootToken)\n      .command(options.command)\n      .body(new InvocationBody({}))\n      .expiresAt(intoSecondsFromNow(60))\n      .audience(options.audience)\n      .build(this.keypair.privateKey());\n  }\n}\n","import { type ClusterKey, encrypt, type SecretKey } from \"@nillion/blindfold\";\nimport { isPlainObject } from \"es-toolkit\";\nimport { reveal } from \"#/common/blindfold\";\nimport type { ByNodeName, Did } from \"#/common/types\";\nimport { Log } from \"#/logger\";\nimport type { NilDbBaseClient } from \"#/nildb/base-client\";\n\n/**\n * Executes an asynchronous operation on a list of clients in parallel.\n */\nexport async function executeOnCluster<Client extends NilDbBaseClient, T>(\n  nodes: Client[],\n  operation: (client: Client, index: number) => Promise<T>,\n): Promise<ByNodeName<T>> {\n  Log.debug({ nodes: nodes.length }, \"Executing cluster operation\");\n\n  const promises = nodes.map(async (client, index): Promise<[Did, T]> => {\n    const node = client.id.toString() as Did;\n    Log.debug({ node, index }, \"Starting node operation\");\n\n    try {\n      const result = await operation(client, index);\n      return [node, result];\n    } catch (error) {\n      throw [node, error];\n    }\n  });\n\n  const results = await Promise.allSettled(promises);\n\n  const successes: [Did, T][] = [];\n  const failures: { node: Did; error: unknown }[] = [];\n\n  for (const result of results) {\n    if (result.status === \"fulfilled\") {\n      successes.push(result.value);\n    } else {\n      const [node, error] = result.reason;\n      const cause = error.cause;\n\n      const flattened = {\n        message: error?.message ?? \"\",\n        body: cause?.body ?? undefined,\n        status: cause?.status ?? undefined,\n      };\n\n      failures.push({\n        node,\n        error: flattened,\n      });\n    }\n  }\n\n  if (failures.length > 0) {\n    Log.error({ successes, failures }, \"Cluster operation failed\");\n    throw failures;\n  }\n\n  Log.debug(\"Cluster operation succeeded\");\n\n  return Object.fromEntries(successes);\n}\n\ntype AllotInfo = {\n  path: string;\n  value: string | number | bigint | Uint8Array<ArrayBufferLike>;\n};\n\n/**\n * Recursively walks a data structure (objects and arrays) to find all properties\n * with the key \"%allot\" (case-insensitive) and returns their dot-notation paths and values.\n *\n * @example\n * const obj = {\n *   \"%allot\": \"secret1\",\n *   data: [\n *     { \"%allot\": \"secret2\" },\n *     { nested: { \"%ALLOT\": \"secret3\" } }\n *   ]\n * };\n *\n * findAllotPathsAndValues(obj);\n * // Returns:\n * // [\n * //   { path: \"%allot\", value: \"secret1\" },\n * //   { path: \"data.0.%allot\", value: \"secret2\" },\n * //   { path: \"data.1.nested.%ALLOT\", value: \"secret3\" }\n * // ]\n */\nfunction findAllotPathsAndValues(\n  node: Record<string, unknown> | unknown[],\n  currentPath = \"\",\n): AllotInfo[] {\n  // Handle arrays\n  if (Array.isArray(node)) {\n    return node.flatMap((item, index) => {\n      const fullPath = currentPath ? `${currentPath}.${index}` : `${index}`;\n      if (isPlainObject(item)) {\n        return findAllotPathsAndValues(\n          item as Record<string, unknown>,\n          fullPath,\n        );\n      }\n      return [];\n    });\n  }\n\n  // Handle objects\n  return Object.entries(node).flatMap(([key, value]) => {\n    const fullPath = currentPath ? `${currentPath}.${key}` : key;\n\n    if (key.toLowerCase() === \"%allot\") {\n      return [{ path: fullPath, value }];\n    }\n    if (isPlainObject(value)) {\n      return findAllotPathsAndValues(\n        value as Record<string, unknown>,\n        fullPath,\n      );\n    }\n    if (Array.isArray(value)) {\n      return findAllotPathsAndValues(value, fullPath);\n    }\n    return [];\n  }) as AllotInfo[];\n}\n\n/**\n * Prepares a request body for distribution across multiple nodes by creating copies\n * of the body and secret-sharing any values marked with %allot keys.\n *\n * @example\n * const result = await prepareRequest({\n *   key: secretKey,\n *   clients: [client1, client2, client3],\n *   body: {\n *     data: [{\n *       foo: \"bar\",\n *       \"%allot\": \"secret-value\"\n *     }]\n *   }\n * });\n * // Returns: {\n * //   \"node1\": { data: [{ foo: \"bar\", \"%share\": \"encrypted-share-1\" }] },\n * //   \"node2\": { data: [{ foo: \"bar\", \"%share\": \"encrypted-share-2\" }] },\n * //   \"node3\": { data: [{ foo: \"bar\", \"%share\": \"encrypted-share-3\" }] },\n * // }\n */\nexport async function prepareRequest<\n  T extends Record<string, unknown>,\n>(options: {\n  key: SecretKey | ClusterKey | undefined;\n  clients: NilDbBaseClient[];\n  body: T;\n}): Promise<ByNodeName<T>> {\n  const { key, clients, body } = options;\n\n  // 1. Find all %allot values in the body\n  const allots = findAllotPathsAndValues(body);\n\n  // 2. Warn if %allots found but no key configured\n  if (!key && allots.length > 0) {\n    throw new Error(`No key but ${allots.length} %allot(s) detected in data`);\n  }\n\n  // 3. Create secret shares for each %allot value if key exists\n  const sharesMap = new Map<string, Record<string, unknown>>();\n  if (key && allots.length > 0) {\n    for (const { path, value } of allots) {\n      // Encrypt the value to create shares\n      const encryptedShares = await encrypt(key, value);\n\n      // Map shares to node Dids\n      const sharesByNode: Record<string, unknown> = {};\n      clients.forEach((client, index) => {\n        sharesByNode[client.id.toString()] = encryptedShares[index];\n      });\n\n      sharesMap.set(path, sharesByNode);\n    }\n  }\n\n  // 4 & 5. Create copies and replace %allot: <value> with %share: <nodeX_encrypted_share>\n  const result: ByNodeName<T> = {} as ByNodeName<T>;\n\n  clients.forEach((client) => {\n    const bodyCopy = structuredClone(body) as T;\n\n    // Replace each %allot with %share for this node\n    if (key && allots.length > 0) {\n      for (const { path } of allots) {\n        const sharesByNode = sharesMap.get(path);\n        if (sharesByNode) {\n          // Parse the path to handle array indices\n          const pathParts = path.split(\".\");\n          const allotKey = pathParts.pop(); // This should be \"%allot\" or \"%ALLOT\"\n          if (!allotKey) {\n            throw new Error(\n              `Expected an allot key in the path parts: ${pathParts}`,\n            );\n          }\n\n          if (pathParts.length === 0) {\n            delete bodyCopy[allotKey];\n            // @ts-expect-error correcting types requires out of scope wider refactor\n            bodyCopy[\"%share\"] = sharesByNode[client.id.toString()];\n          } else {\n            // biome-ignore lint/suspicious/noExplicitAny: Navigate to parent to handle array indices\n            let parent: any = bodyCopy;\n            for (const part of pathParts) {\n              // Check if part is a number (array index)\n              const index = Number(part);\n              if (Number.isNaN(index)) {\n                parent = parent[part];\n              } else {\n                parent = parent[index];\n              }\n            }\n\n            // Replace %allot with %share\n            delete parent[allotKey];\n            parent[\"%share\"] = sharesByNode[client.id.toString()];\n          }\n        }\n      }\n    }\n\n    // @ts-expect-error correcting types requires out of scope wider refactor\n    result[client.id.toString()] = bodyCopy;\n  });\n\n  // 6. Return the bodies mapped by node name\n  return result;\n}\n\n/**\n * Selects a single canonical response from a map of node results.\n */\nexport function processPlaintextResponse<T>(\n  results: ByNodeName<T>,\n  strategy: \"first\" | \"random\" = \"first\",\n): T {\n  const values = Object.values(results);\n\n  Log.debug(\n    { nodes: values.length, strategy },\n    \"Processing plaintext response\",\n  );\n\n  // 1. Determine the index based on the chosen strategy.\n  let index = 0; // Default to 'first'\n  if (strategy === \"random\") {\n    index = Math.floor(Math.random() * values.length);\n  }\n\n  // 2. Select the result using the determined index.\n  const selected = values.at(index);\n\n  // 3. Safeguard\n  if (selected === undefined) {\n    Log.error({ resultsCount: values.length }, \"No response to select\");\n    throw new Error(\"Failed to select a canonical response.\", {\n      cause: results,\n    });\n  }\n\n  Log.debug({ selectedIndex: index }, \"Response selected\");\n  return selected;\n}\n\n/**\n * Processes and reveals a list of documents from a cluster response.\n */\nexport async function processConcealedListResponse<\n  T extends { data: Record<string, unknown>[] },\n>(options: {\n  key: SecretKey | ClusterKey;\n  resultsByNode: ByNodeName<T>;\n}): Promise<Record<string, unknown>[]> {\n  const { key, resultsByNode } = options;\n\n  Log.debug(\n    {\n      key: key.constructor.name,\n      nodes: Object.keys(resultsByNode).length,\n    },\n    \"Processing concealed list response\",\n  );\n\n  // 1. Flatten responses into an array of document shares.\n  const allShares = Object.values(resultsByNode).flatMap((r) => r.data);\n  Log.debug({ totalShares: allShares.length }, \"Flattened document shares\");\n\n  // 2. Group shares by their id.\n  const groupedShares = allShares.reduce((acc, doc) => {\n    const docId = doc._id as string;\n    if (docId) {\n      // Get the existing group or create a new one.\n      const group = acc.get(docId) ?? [];\n      group.push(doc);\n      acc.set(docId, group);\n    }\n    return acc;\n  }, new Map<string, Record<string, unknown>[]>());\n\n  Log.debug(\n    { documentCount: groupedShares.size },\n    \"Grouped shares by document ID\",\n  );\n\n  // 3. Create an array of reveal promises, one for each document group.\n  const revealPromises = Array.from(groupedShares.values()).map((shares) =>\n    reveal(key, shares),\n  );\n\n  // 4. Await all reveal operations to run in parallel for maximum efficiency.\n  const revealed = await Promise.all(revealPromises);\n  Log.debug(\n    { revealedCount: revealed.length },\n    \"Documents revealed successfully\",\n  );\n\n  return revealed;\n}\n\n/**\n * Processes and reveals a single document from a cluster response.\n */\nexport async function processConcealedObjectResponse<\n  T extends { data: Record<string, unknown> },\n>(options: {\n  key: SecretKey | ClusterKey;\n  resultsByNode: ByNodeName<T>;\n}): Promise<Record<string, unknown>> {\n  const { key, resultsByNode } = options;\n\n  Log.debug(\n    {\n      key: key.constructor.name,\n      nodes: Object.keys(resultsByNode).length,\n    },\n    \"Processing concealed object response\",\n  );\n\n  const shares = Object.values(resultsByNode).map((response) => response.data);\n  Log.debug({ shareCount: shares.length }, \"Collected object shares\");\n\n  const revealed = await reveal(key, shares);\n  Log.debug(\"Object revealed successfully\");\n\n  return revealed;\n}\n","import {\n  allot,\n  ClusterKey,\n  encrypt,\n  SecretKey,\n  unify,\n} from \"@nillion/blindfold\";\nimport { Log } from \"#/logger\";\n\nexport type BlindfoldOperation = \"store\" | \"match\" | \"sum\";\n\n/**\n * Defines valid configurations for creating or using a Blindfold encryption key.\n */\nexport type BlindfoldFactoryConfig =\n  //\n  // --- Scenario 1: Use a pre-existing key ---\n  //\n  | {\n      key: SecretKey | ClusterKey;\n      // Forbid all other properties\n      operation?: never;\n      seed?: never;\n      useClusterKey?: never;\n      threshold?: never;\n    }\n  //\n  // --- Scenario 2: Generate a SecretKey (allows seed) ---\n  //\n  | {\n      operation: \"store\" | \"match\";\n      seed?: Uint8Array | Buffer | string;\n      useClusterKey?: never; // Explicitly forbid useClusterKey\n      threshold?: never;\n    }\n  | {\n      operation: \"sum\";\n      seed?: Uint8Array | Buffer | string;\n      useClusterKey?: never; // Explicitly forbid useClusterKey\n      threshold?: number;\n    }\n  //\n  // --- Scenario 3: Generate a ClusterKey (disallows seed) ---\n  //\n  | {\n      operation: \"store\" | \"match\";\n      seed?: never; // Explicitly forbid seed\n      useClusterKey: true;\n      threshold?: never;\n    }\n  | {\n      operation: \"sum\";\n      seed?: never; // Explicitly forbid seed\n      useClusterKey: true;\n      threshold?: number;\n    };\n\nexport async function toBlindfoldKey(\n  options: BlindfoldFactoryConfig & { clusterSize: number },\n): Promise<SecretKey | ClusterKey> {\n  Log.debug(\n    {\n      hasExistingKey: \"key\" in options,\n      operation: \"operation\" in options ? options.operation : \"existing-key\",\n      clusterSize: options.clusterSize,\n      useClusterKey: \"useClusterKey\" in options ? options.useClusterKey : false,\n      hasSeed: \"seed\" in options && options.seed !== undefined,\n    },\n    \"Creating blindfold key\",\n  );\n\n  if (\"key\" in options) {\n    Log.debug({ keyType: options.key.constructor.name }, \"Using existing key\");\n    return options.key;\n  }\n\n  const { operation, clusterSize } = options;\n\n  const op = {\n    [operation]: true,\n  };\n\n  const threshold = \"threshold\" in options ? options.threshold : undefined;\n  const cluster = { nodes: new Array(clusterSize).fill({}) };\n\n  const useClusterKey = \"useClusterKey\" in options && options.useClusterKey;\n  const useSeed = \"seed\" in options && options.seed !== undefined;\n  const isClusterKey = useClusterKey || (!useSeed && clusterSize > 1);\n\n  const type = isClusterKey ? \"ClusterKey\" : \"SecretKey\";\n  const key = isClusterKey\n    ? await ClusterKey.generate(cluster, op, threshold)\n    : await SecretKey.generate(\n        cluster,\n        op,\n        threshold,\n        \"seed\" in options ? options.seed : undefined,\n      );\n\n  Log.debug(\n    {\n      key: type,\n      operation,\n      threshold,\n      nodes: clusterSize,\n    },\n    \"Key generated\",\n  );\n  return key;\n}\n\n/**\n * @remarks\n * In @nillion/blindfold:\n *\n * 1. Data's outbound journey is a two-step process:\n *   - Traverse the object `encrypt()` values marked with `%allot`\n *   - Call @nillion/blindfold's `allot()` to turn %allot'ed values into shares\n * 2. Data's inbound journey is a single operation: `unify()` which handles recombining\n * shares and decryption\n *\n * This design feels asymmetric (eg blindfold handles everything inbound but not outbound),\n * but for now, 'conceal' and 'reveal' should encapsulate this asymmetry.\n */\n\n/**\n * Encrypts fields marked with `%allot` and then splits the object into an array of secret shares.\n *\n * @example\n * declare const key: SecretKey | ClusterKey\n * const data = [{\n *   patientId: { \"%allot\": \"user-123\" }, // This value will be concealed\n *   visitDate: \"2025-06-24\",             // This value will remain public\n * }];\n *\n * // Output of conceal(key, data) assuming 2 nodes:\n * [\n *   // Document to be stored on Node 1\n *   {\n *     patientId: { \"%share\": \"<ciphertext_a_for_user-123>\" },\n *     visitDate: \"2025-06-24\",\n *   },\n *   // Document to be stored on Node 2\n *   {\n *     patientId: { \"%share\": \"<ciphertext_a_for_user-123>\" },\n *     visitDate: \"2025-06-24\",\n *   },\n * ]\n */\nexport async function conceal(\n  key: SecretKey | ClusterKey,\n  data: Record<string, unknown>,\n): Promise<Record<string, unknown>[]> {\n  Log.debug(\n    {\n      keyType: key.constructor.name,\n      dataKeys: Object.keys(data),\n    },\n    \"Starting data concealment\",\n  );\n  const encryptDeep = async (value: unknown): Promise<unknown> => {\n    // Base case: if it's not an object or is null, return\n    if (typeof value !== \"object\" || value === null) {\n      return value;\n    }\n\n    // Recurse: handle arrays\n    if (Array.isArray(value)) {\n      return Promise.all(value.map((e) => encryptDeep(e)));\n    }\n\n    // Recurse: handle objects\n    const encryptedObj: Record<string, unknown> = {};\n    for (const [oKey, oVal] of Object.entries(value)) {\n      if (typeof oVal === \"object\" && oVal !== null) {\n        // encrypt values\n        if (\"%allot\" in oVal) {\n          const plaintext = oVal[\"%allot\"];\n          encryptedObj[oKey] = {\n            \"%allot\": await encrypt(key, plaintext),\n          };\n        } else {\n          // Otherwise, continue the recursion\n          encryptedObj[oKey] = await encryptDeep(oVal);\n        }\n      } else {\n        // Directly copy primitive values\n        encryptedObj[oKey] = oVal;\n      }\n    }\n    return encryptedObj;\n  };\n\n  const encryptedData = (await encryptDeep(data)) as Record<string, unknown>;\n\n  // splits data into one record per-node where each node gets a secret share\n  const shares = allot(encryptedData) as Record<string, unknown>[];\n\n  Log.debug(\n    { type: key.constructor.name, shares: shares.length },\n    \"Data concealed\",\n  );\n\n  return shares;\n}\n\n/**\n * Recombines an array of secret shares and decrypts the concealed values to restore the original object.\n *\n * @example\n * declare const key: SecretKey | ClusterKey\n * const shares = [\n *   {\n *     patientId: { \"%share\": \"<ciphertext_A_for_user-123>\" },\n *     visitDate: \"2025-06-24\",\n *   },\n *   {\n *     patientId: { \"%share\": \"<ciphertext_B_for_user-123>\" },\n *     visitDate: \"2025-06-24\",\n *   },\n * ];\n *\n * // Output of reveal(key, shares):\n * {\n *   patientId: \"user-123\",\n *   visitDate: \"2025-06-24\",\n * }\n */\nexport async function reveal(\n  key: SecretKey | ClusterKey,\n  shares: Record<string, unknown>[],\n): Promise<Record<string, unknown>> {\n  const unified = await unify(key, shares);\n\n  Log.debug(\n    {\n      type: key.constructor.name,\n      keys: Object.keys(unified as Record<string, unknown>),\n    },\n    \"Revealed data\",\n  );\n\n  return unified as Record<string, unknown>;\n}\n","import pino, { type Level, type Logger, type LoggerOptions } from \"pino\";\nimport pinoPretty, { prettyFactory } from \"pino-pretty\";\n\nexport type LogLevel = Level | \"silent\";\n\nconst LOG_LEVEL_KEY = \"NILLION_LOG_LEVEL\";\nconst DEFAULT_LOG_LEVEL: LogLevel = \"silent\";\nconst VALID_LOG_LEVELS: ReadonlyArray<LogLevel> = [\n  \"fatal\",\n  \"error\",\n  \"warn\",\n  \"info\",\n  \"debug\",\n  \"trace\",\n  \"silent\",\n];\n\nconst safeStorage = {\n  getItem: (key: string): string | null => {\n    try {\n      // Use optional chaining for resilience in non-browser environments.\n      return globalThis.localStorage?.getItem(key) ?? null;\n    } catch {\n      return null;\n    }\n  },\n  setItem: (key: string, value: string): void => {\n    try {\n      globalThis.localStorage?.setItem(key, value);\n    } catch {\n      // Ignore errors if storage is disabled\n    }\n  },\n  removeItem: (key: string): void => {\n    try {\n      globalThis.localStorage?.removeItem(key);\n    } catch {\n      // Ignore errors\n    }\n  },\n};\n\nfunction isValidLogLevel(value: unknown): value is LogLevel {\n  return (\n    typeof value === \"string\" && VALID_LOG_LEVELS.includes(value as LogLevel)\n  );\n}\n\nfunction getInitialLogLevel(): LogLevel {\n  let level = DEFAULT_LOG_LEVEL;\n  const sources = [\n    process.env?.[LOG_LEVEL_KEY],\n    safeStorage.getItem(LOG_LEVEL_KEY),\n    // @ts-ignore\n    globalThis[LOG_LEVEL_KEY],\n  ];\n\n  for (const source of sources) {\n    const levelAttempt = source?.toLowerCase();\n    if (isValidLogLevel(levelAttempt)) {\n      level = levelAttempt;\n      break;\n    }\n  }\n\n  return level;\n}\n\ndeclare const window: unknown;\n\nfunction getLoggerForEnv(): Logger<never, boolean> {\n  const env = process.env.NODE_ENV ?? \"production\";\n  const level = getInitialLogLevel();\n  const isNode = typeof window === \"undefined\";\n\n  // For production OR any browser environment, return a simple logger.\n  if (env === \"production\" || !isNode) {\n    return pino({\n      level,\n      browser: { asObject: true },\n      base: null,\n    });\n  }\n\n  const stream = pinoPretty({\n    colorize: true,\n    levelFirst: true,\n    translateTime: \"SYS:h:MM:ss TT\",\n    ignore: \"pid,hostname\",\n    sync: true,\n  });\n\n  // If test, mirror to console.log so vitest doesn't swallow logs\n  const hooks: Partial<LoggerOptions[\"hooks\"]> = {};\n  if (env === \"test\") {\n    hooks.streamWrite = (s: string): string => {\n      const prettify = prettyFactory({ sync: true, colorize: true });\n      console.log(prettify(s));\n      return s;\n    };\n  }\n\n  return pino(\n    {\n      level,\n      hooks,\n    },\n    stream,\n  );\n}\n\nexport const Log = getLoggerForEnv();\n\nexport function setLogLevel(level: LogLevel): void {\n  if (!isValidLogLevel(level)) {\n    console.warn(`[Logger] Invalid log level: \"${level}\". Ignoring.`);\n    return;\n  }\n  Log.level = level;\n  safeStorage.setItem(LOG_LEVEL_KEY, level);\n}\n\nexport function getLogLevel(): LogLevel {\n  return Log.level as LogLevel;\n}\n\nexport function clearStoredLogLevel(): void {\n  safeStorage.removeItem(LOG_LEVEL_KEY);\n}\n\ninterface NillionGlobal {\n  setLogLevel: (level: LogLevel) => void;\n  getLogLevel: () => LogLevel;\n  clearStoredLogLevel: () => void;\n}\n\ndeclare global {\n  var __NILLION: NillionGlobal;\n}\n\nif (typeof globalThis !== \"undefined\") {\n  globalThis.__NILLION = {\n    setLogLevel,\n    getLogLevel,\n    clearStoredLogLevel,\n  };\n}\n","import type { ClusterKey, SecretKey } from \"@nillion/blindfold\";\nimport type { Keypair, Did as NucDid } from \"@nillion/nuc\";\nimport { executeOnCluster } from \"./common/cluster\";\nimport type { ByNodeName } from \"./common/types\";\nimport type { ReadAboutNodeResponse } from \"./dto/system.dto\";\nimport { Log } from \"./logger\";\nimport type { NilDbBaseClient } from \"./nildb/base-client\";\n\n/**\n * Common constructor options for all SecretVault clients.\n */\nexport type SecretVaultBaseOptions<TClient extends NilDbBaseClient> = {\n  keypair: Keypair;\n  clients: TClient[];\n  key?: SecretKey | ClusterKey;\n};\n\n/**\n * Provides common properties and methods for SecretVault clients.\n */\nexport class SecretVaultBaseClient<TClient extends NilDbBaseClient> {\n  protected _options: SecretVaultBaseOptions<TClient>;\n\n  constructor(options: SecretVaultBaseOptions<TClient>) {\n    this._options = options;\n  }\n\n  get id(): string {\n    return this.did.toString();\n  }\n\n  /**\n   * The DID of the keypair associated with this client.\n   */\n  get did(): NucDid {\n    return this._options.keypair.toDid();\n  }\n\n  /**\n   * The array of underlying node clients for the cluster.\n   */\n  get nodes(): TClient[] {\n    return this._options.clients;\n  }\n\n  /**\n   * The keypair used by this client for signing.\n   */\n  get keypair(): Keypair {\n    return this._options.keypair;\n  }\n\n  /**\n   * Retrieves information about each node in the cluster.\n   */\n  async readClusterInfo(): Promise<ByNodeName<ReadAboutNodeResponse>> {\n    const result = await executeOnCluster(this.nodes, (c) => c.aboutNode());\n    Log.info({ nodes: Object.keys(result).length }, \"Cluster info retrieved\");\n    return result;\n  }\n}\n","export function intoSecondsFromNow(seconds: number): number {\n  return Math.floor((Date.now() + seconds * 1000) / 1000);\n}\n\nexport function pause(ms: number): Promise<void> {\n  return new Promise((r) => setTimeout(r, ms));\n}\n\nexport function isError(value: unknown): value is Error {\n  return value instanceof Error;\n}\n\nexport type ErrorLike = {\n  message: string;\n  cause: unknown;\n};\n\nexport function isErrorLike(value: unknown): value is ErrorLike {\n  if (typeof value !== \"object\" || value === null) {\n    return false;\n  }\n\n  const obj = value as Record<string, unknown>;\n  return typeof obj.message === \"string\" && \"cause\" in obj;\n}\n","import { Command } from \"@nillion/nuc\";\n\nfunction createNucNamespace(prefix: string) {\n  const base = prefix.split(\"/\");\n  return {\n    root: new Command([...base]),\n    create: new Command([...base, \"create\"]),\n    read: new Command([...base, \"read\"]),\n    update: new Command([...base, \"update\"]),\n    delete: new Command([...base, \"delete\"]),\n    execute: new Command([...base, \"execute\"]),\n  };\n}\n\n/**\n * Command namespace for NilDB operations.\n *\n * Provides pre-configured command objects for interacting with different\n * NilDB subsystems including system, builders, data, collections, queries, and users.\n *\n * @example\n * ```typescript\n * import { NucCmd } from \"@nillion/secretvaults\";\n *\n * // Use for creating a collection\n * const command = NucCmd.nil.db.collections.create;\n * ```\n */\nexport const NucCmd = {\n  nil: {\n    db: {\n      root: new Command([\"nil\", \"db\"]),\n      system: createNucNamespace(\"nil/db/system\"),\n      builders: createNucNamespace(\"nil/db/builders\"),\n      data: createNucNamespace(\"nil/db/data\"),\n      collections: createNucNamespace(\"nil/db/collections\"),\n      queries: createNucNamespace(\"nil/db/queries\"),\n      users: createNucNamespace(\"nil/db/users\"),\n    } as const,\n  } as const,\n} as const;\n","import { z } from \"zod\";\n\n/**\n * UUID type for unique identifiers.\n *\n * A branded type that ensures type safety for UUID strings.\n *\n * @example\n * ```typescript\n * const id: Uuid = Uuid.parse(\"123e4567-e89b-12d3-a456-426614174000\");\n * ```\n */\nexport const Uuid = z.uuid().brand<\"Uuid\">();\nexport type Uuid = z.infer<typeof Uuid>;\n\n/**\n * Decentralized Identifier (DID) for Nillion network.\n *\n * A branded type that loosely validates DIDs.\n *\n * @example\n * ```ts\n * const did: Did = Did.parse(\"did:nil:abcdef123456...\");\n * ```\n */\nexport const Did = z\n  .string()\n  .startsWith(\"did:\")\n  .superRefine((value, ctx) => {\n    if (value.startsWith(\"did:ethr:\")) {\n      console.warn(\n        \"Received `did:ethr` which is not compatible with this version of secretvaults — upgrade to 1.0.0+.\",\n      );\n      return;\n    }\n\n    if (value.startsWith(\"did:nil:\")) {\n      return;\n    }\n\n    if (value.startsWith(\"did:key:\")) {\n      // Conversion is handled in transform, but validate format here\n      try {\n        const multibaseKey = value.slice(\"did:key:\".length);\n        if (!multibaseKey || multibaseKey.length < 10) {\n          ctx.addIssue({\n            code: \"custom\",\n            message: \"Invalid did:key format - key portion too short\",\n          });\n        }\n      } catch {\n        ctx.addIssue({\n          code: \"custom\",\n          message: \"Invalid did:key format\",\n        });\n      }\n      return;\n    }\n\n    ctx.addIssue({\n      code: \"custom\",\n      message: `Unsupported DID method. Expected did:nil, did:key, or did:ethr, but got: ${value.slice(0, 10)}...`,\n    });\n  })\n  .transform((value) => {\n    if (value.startsWith(\"did:key:\")) {\n      return convertDidKeyToDidNil(value);\n    }\n    return value;\n  })\n  .brand<\"Did\">();\nexport type Did = z.infer<typeof Did>;\n\n// Base58 alphabet used in multibase\nconst BASE58_ALPHABET =\n  \"123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz\";\n\n// Decode base58 string to Uint8Array (compatible with browser and Node)\nfunction decodeBase58(str: string): Uint8Array {\n  let num = 0n;\n\n  for (let i = 0; i < str.length; i++) {\n    const digit = BigInt(BASE58_ALPHABET.indexOf(str[i]));\n    if (digit === -1n) {\n      throw new Error(`Invalid base58 character: ${str[i]}`);\n    }\n    num = num * 58n + digit;\n  }\n\n  // Convert big integer to bytes\n  const bytes: number[] = [];\n  while (num > 0n) {\n    bytes.unshift(Number(num & 0xffn));\n    num = num >> 8n;\n  }\n\n  // Handle leading zeros (represented as '1' in base58)\n  for (let i = 0; i < str.length && str[i] === \"1\"; i++) {\n    bytes.unshift(0);\n  }\n\n  return new Uint8Array(bytes.length > 0 ? bytes : [0]);\n}\n\n// Helper to convert did:key to did:nil format\nfunction convertDidKeyToDidNil(didKey: string): string {\n  try {\n    // did:key format: did:key:z<multibase-encoded-key>\n    const multibaseKey = didKey.slice(\"did:key:\".length);\n\n    if (!multibaseKey.startsWith(\"z\")) {\n      throw new Error(\"Expected multibase encoding type 'z' (base58)\");\n    }\n\n    // Decode the base58 key (skip the 'z' prefix)\n    const decodedBytes = decodeBase58(multibaseKey.slice(1));\n\n    // Skip the multicodec prefix (usually 2-3 bytes for key type)\n    // For Ed25519: 0xed 0x01\n    // For secp256k1: 0xe7 0x01\n    const publicKeyHex = toHex(decodedBytes.slice(2));\n\n    return `did:nil:${publicKeyHex}`;\n  } catch (error) {\n    throw new Error(\n      `Failed to convert did:key to did:nil: ${error instanceof Error ? error.message : String(error)}`,\n    );\n  }\n}\n\n// Convert Uint8Array to hex string\nfunction toHex(bytes: Uint8Array): string {\n  return Array.from(bytes)\n    .map((b) => b.toString(16).padStart(2, \"0\"))\n    .join(\"\");\n}\n\n/**\n * Map type indexed by node DIDs.\n *\n * Used to store data associated with specific nodes in the network.\n *\n * @typeParam T - The type of value stored for each node\n *\n * @example\n * ```ts\n * type NodeStatus = ByNodeName<{ online: boolean; lastSeen: Date }>;\n * ```\n */\nexport type ByNodeName<T> = Record<Did, T>;\n","import { z } from \"zod\";\nimport { NilDbEndpoint } from \"#/common/paths\";\nimport type { Uuid } from \"#/common/types\";\nimport {\n  DeleteBuilderResponse,\n  ReadBuilderProfileResponse,\n  type RegisterBuilderRequest,\n  RegisterBuilderResponse,\n  type UpdateBuilderProfileRequest,\n  UpdateBuilderProfileResponse,\n} from \"#/dto/builders.dto\";\nimport {\n  type CreateCollectionIndexRequest,\n  CreateCollectionIndexResponse,\n  type CreateCollectionRequest,\n  CreateCollectionResponse,\n  DeleteCollectionResponse,\n  DropCollectionIndexResponse,\n  ListCollectionsResponse,\n  ReadCollectionMetadataResponse,\n} from \"#/dto/collections.dto\";\nimport type { Name } from \"#/dto/common\";\nimport {\n  CreateDataResponse,\n  type CreateStandardDataRequest,\n  type DeleteDataRequest,\n  DeleteDataResponse,\n  type FindDataRequest,\n  FindDataResponse,\n  FlushDataResponse,\n  TailDataResponse,\n  type UpdateDataRequest,\n  UpdateDataResponse,\n} from \"#/dto/data.dto\";\nimport {\n  type CreateQueryRequest,\n  CreateQueryResponse,\n  DeleteQueryResponse,\n  ReadQueriesResponse,\n  ReadQueryResponse,\n  ReadQueryRunByIdResponse,\n  type RunQueryRequest,\n  RunQueryResponse,\n} from \"#/dto/queries.dto\";\nimport type { ReadAboutNodeResponse } from \"#/dto/system.dto\";\nimport { NilDbBaseClient, NilDbBaseClientOptions } from \"#/nildb/base-client\";\n\nexport const NilDbBuilderClientOptions = z.object({\n  ...NilDbBaseClientOptions.shape,\n});\nexport type NilDbBuilderClientOptions = z.infer<\n  typeof NilDbBuilderClientOptions\n>;\n\n/**\n *\n */\nexport class NilDbBuilderClient extends NilDbBaseClient {\n  // biome-ignore lint/correctness/noUnusedPrivateClassMembers: currently unused but useful to keep\n  #options: NilDbBuilderClientOptions;\n\n  constructor(options: NilDbBuilderClientOptions) {\n    super(options);\n    this.#options = options;\n  }\n\n  /**\n   * Registers a new builder.\n   */\n  register(body: RegisterBuilderRequest): Promise<RegisterBuilderResponse> {\n    return this.request({\n      path: NilDbEndpoint.v1.builders.register,\n      method: \"POST\",\n      body,\n      responseSchema: RegisterBuilderResponse,\n    });\n  }\n\n  /**\n   * Retrieves the authenticated builder's profile information.\n   */\n  readProfile(token: string): Promise<ReadBuilderProfileResponse> {\n    return this.request({\n      path: NilDbEndpoint.v1.builders.me,\n      token,\n      responseSchema: ReadBuilderProfileResponse,\n    });\n  }\n\n  /**\n   * Updates the authenticated builder's profile information.\n   */\n  updateProfile(\n    token: string,\n    body: UpdateBuilderProfileRequest,\n  ): Promise<UpdateBuilderProfileResponse> {\n    return this.request({\n      path: NilDbEndpoint.v1.builders.me,\n      method: \"POST\",\n      body,\n      token,\n      responseSchema: UpdateBuilderProfileResponse,\n    });\n  }\n\n  /**\n   * Deletes the authenticated builder and all associated resources.\n   */\n  deleteBuilder(token: string): Promise<DeleteBuilderResponse> {\n    return this.request({\n      path: NilDbEndpoint.v1.builders.me,\n      method: \"DELETE\",\n      token,\n      responseSchema: DeleteBuilderResponse,\n    });\n  }\n\n  /**\n   * Creates a new collection for data validation.\n   */\n  createCollection(\n    token: string,\n    body: CreateCollectionRequest,\n  ): Promise<CreateCollectionResponse> {\n    return this.request({\n      path: NilDbEndpoint.v1.collections.root,\n      method: \"POST\",\n      body,\n      token,\n      responseSchema: CreateCollectionResponse,\n    });\n  }\n\n  /**\n   * Lists all collections owned by the authenticated builder.\n   */\n  readCollections(token: string): Promise<ListCollectionsResponse> {\n    return this.request({\n      path: NilDbEndpoint.v1.collections.root,\n      method: \"GET\",\n      token,\n      responseSchema: ListCollectionsResponse,\n    });\n  }\n\n  /**\n   * Deletes a collection by id and all associated data.\n   */\n  deleteCollection(\n    token: string,\n    collection: Uuid,\n  ): Promise<DeleteCollectionResponse> {\n    return this.request({\n      path: NilDbEndpoint.v1.collections.byId.replace(\":id\", collection),\n      method: \"DELETE\",\n      token,\n      responseSchema: DeleteCollectionResponse,\n    });\n  }\n\n  /**\n   * Retrieves a collection by id including metadata.\n   */\n  readCollection(\n    token: string,\n    collection: Uuid,\n  ): Promise<ReadCollectionMetadataResponse> {\n    return this.request({\n      path: NilDbEndpoint.v1.collections.byId.replace(\":id\", collection),\n      method: \"GET\",\n      token,\n      responseSchema: ReadCollectionMetadataResponse,\n    });\n  }\n\n  /**\n   * Creates an index on a collection.\n   */\n  createCollectionIndex(\n    token: string,\n    collection: Uuid,\n    body: CreateCollectionIndexRequest,\n  ): Promise<CreateCollectionIndexResponse> {\n    return this.request({\n      path: NilDbEndpoint.v1.collections.indexesById.replace(\":id\", collection),\n      method: \"POST\",\n      body,\n      token,\n      responseSchema: CreateCollectionIndexResponse,\n    });\n  }\n\n  /**\n   * Drops an index from a collection.\n   */\n  dropCollectionIndex(\n    token: string,\n    collection: Uuid,\n    index: Name,\n  ): Promise<DropCollectionIndexResponse> {\n    return this.request({\n      path: NilDbEndpoint.v1.collections.indexesByNameById\n        .replace(\":id\", collection)\n        .replace(\":name\", index),\n      method: \"DELETE\",\n      token,\n      responseSchema: DropCollectionIndexResponse,\n    });\n  }\n\n  /**\n   * Lists all queries owned by the authenticated builder.\n   */\n  getQueries(token: string): Promise<ReadQueriesResponse> {\n    return this.request({\n      path: NilDbEndpoint.v1.queries.root,\n      token,\n      responseSchema: ReadQueriesResponse,\n    });\n  }\n\n  /**\n   * Retrieves a query by id.\n   */\n  getQuery(token: string, query: Uuid): Promise<ReadQueryResponse> {\n    return this.request({\n      path: NilDbEndpoint.v1.queries.byId.replace(\":id\", query),\n      token,\n      responseSchema: ReadQueryResponse,\n    });\n  }\n\n  /**\n   * Creates a new MongoDB aggregation query with variable substitution.\n   */\n  createQuery(\n    token: string,\n    body: CreateQueryRequest,\n  ): Promise<CreateQueryResponse> {\n    return this.request({\n      path: NilDbEndpoint.v1.queries.root,\n      method: \"POST\",\n      body,\n      token,\n      responseSchema: CreateQueryResponse,\n    });\n  }\n\n  /**\n   * Deletes a query by id.\n   */\n  deleteQuery(token: string, query: Uuid): Promise<DeleteQueryResponse> {\n    return this.request({\n      path: NilDbEndpoint.v1.queries.byId.replace(\":id\", query),\n      method: \"DELETE\",\n      token,\n      responseSchema: DeleteQueryResponse,\n    });\n  }\n\n  /**\n   * Executes a query with variable substitution.\n   */\n  runQuery(token: string, body: RunQueryRequest): Promise<RunQueryResponse> {\n    return this.request({\n      path: NilDbEndpoint.v1.queries.run,\n      method: \"POST\",\n      body,\n      token,\n      responseSchema: RunQueryResponse,\n    });\n  }\n\n  /**\n   * Retrieves the status and results of a background query job.\n   */\n  readQueryRunResults(\n    token: string,\n    run: Uuid,\n  ): Promise<ReadQueryRunByIdResponse> {\n    return this.request({\n      path: NilDbEndpoint.v1.queries.runById.replace(\":id\", run),\n      token,\n      responseSchema: ReadQueryRunByIdResponse,\n    });\n  }\n\n  /**\n   * Uploads standard data records to a schema-validated collection.\n   */\n  createStandardData(\n    token: string,\n    body: CreateStandardDataRequest,\n  ): Promise<CreateDataResponse> {\n    return this.request({\n      path: NilDbEndpoint.v1.data.createStandard,\n      method: \"POST\",\n      body,\n      token,\n      responseSchema: CreateDataResponse,\n    });\n  }\n\n  /**\n   * Searches for data matching the provided filter.\n   */\n  findData(token: string, body: FindDataRequest): Promise<FindDataResponse> {\n    return this.request({\n      path: NilDbEndpoint.v1.data.find,\n      method: \"POST\",\n      body,\n      token,\n      responseSchema: FindDataResponse,\n    });\n  }\n\n  /**\n   * Updates data records matching the provided filter.\n   */\n  updateData(\n    token: string,\n    body: UpdateDataRequest,\n  ): Promise<UpdateDataResponse> {\n    return this.request({\n      path: NilDbEndpoint.v1.data.update,\n      method: \"POST\",\n      body,\n      token,\n      responseSchema: UpdateDataResponse,\n    });\n  }\n\n  /**\n   * Deletes data records matching the provided filter.\n   */\n  deleteData(\n    token: string,\n    body: DeleteDataRequest,\n  ): Promise<DeleteDataResponse> {\n    return this.request({\n      path: NilDbEndpoint.v1.data.delete,\n      method: \"POST\",\n      body,\n      token,\n      responseSchema: DeleteDataResponse,\n    });\n  }\n\n  /**\n   * Removes all data from a collection.\n   */\n  flushData(token: string, collection: Uuid): Promise<FlushDataResponse> {\n    return this.request({\n      path: NilDbEndpoint.v1.data.flushById.replace(\":id\", collection),\n      method: \"DELETE\",\n      token,\n      responseSchema: FlushDataResponse,\n    });\n  }\n\n  /**\n   * Retrieves the most recent data records from a collection.\n   */\n  tailData(\n    token: string,\n    collection: Uuid,\n    limit = 10,\n  ): Promise<TailDataResponse> {\n    return this.request({\n      path: `${NilDbEndpoint.v1.data.tailById.replace(\":id\", collection)}?limit=${limit}`,\n      method: \"GET\",\n      token,\n      responseSchema: TailDataResponse,\n    });\n  }\n}\n\nexport async function createNilDbBuilderClient(\n  baseUrl: string,\n): Promise<NilDbBuilderClient> {\n  const response = await fetch(`${baseUrl}/about`);\n  const body = (await response.json()) as ReadAboutNodeResponse;\n\n  const validated = NilDbBuilderClientOptions.parse({\n    about: body,\n    baseUrl: baseUrl,\n  });\n\n  return new NilDbBuilderClient(validated);\n}\n","export const NilDbEndpoint = {\n  v1: {\n    builders: {\n      register: \"/v1/builders/register\",\n      me: \"/v1/builders/me\",\n    },\n    data: {\n      root: \"/v1/data\",\n      find: \"/v1/data/find\",\n      update: \"/v1/data/update\",\n      delete: \"/v1/data/delete\",\n      flushById: \"/v1/data/:id/flush\",\n      tailById: \"/v1/data/:id/tail\",\n      createOwned: \"/v1/data/owned\",\n      createStandard: \"/v1/data/standard\",\n    },\n    queries: {\n      root: \"/v1/queries\",\n      byId: \"/v1/queries/:id\",\n      run: \"/v1/queries/run\",\n      runById: \"/v1/queries/run/:id\",\n    },\n    collections: {\n      root: \"/v1/collections\",\n      byId: \"/v1/collections/:id\",\n      indexesById: \"/v1/collections/:id/indexes\",\n      indexesByNameById: \"/v1/collections/:id/indexes/:name\",\n    },\n    system: {\n      about: \"/about\",\n      health: \"/health\",\n      metrics: \"/metrics\",\n      openApiJson: \"/openapi.json\",\n      maintenanceStart: \"/v1/system/maintenance/start\",\n      maintenanceStop: \"/v1/system/maintenance/stop\",\n      logLevel: \"/v1/system/log-level\",\n    },\n    users: {\n      me: \"/v1/users/me\",\n      data: {\n        root: \"/v1/users/data\",\n        byId: \"/v1/users/data/:collection/:document\",\n        aclById: \"/v1/users/data/:collection/:document/acl\",\n        acl: {\n          grant: \"/v1/users/data/acl/grant\",\n          revoke: \"/v1/users/data/acl/revoke\",\n        },\n      },\n    },\n  },\n} as const;\n","import { z } from \"zod\";\nimport { Did } from \"#/common/types\";\nimport { ApiSuccessResponse, Name } from \"./common\";\n\n/**\n * Builder registration request.\n */\nexport const RegisterBuilderRequest = z.object({\n  did: Did,\n  name: Name,\n});\nexport type RegisterBuilderRequest = z.infer<typeof RegisterBuilderRequest>;\n\n/**\n * Builder registration response.\n */\nexport const RegisterBuilderResponse = z.string();\nexport type RegisterBuilderResponse = z.infer<typeof RegisterBuilderResponse>;\n\n/**\n * Builder profile data.\n */\nconst BuilderProfileDto = z.object({\n  _id: Did,\n  _created: z.iso.datetime(),\n  _updated: z.iso.datetime(),\n  name: z.string(),\n  collections: z.array(z.uuid()),\n  queries: z.array(z.uuid()),\n});\n\n/**\n * Profile retrieval response.\n */\nexport const ReadBuilderProfileResponse = ApiSuccessResponse(BuilderProfileDto);\nexport type ReadBuilderProfileResponse = z.infer<\n  typeof ReadBuilderProfileResponse\n>;\n\n/**\n * Builder deletion response.\n */\nexport const DeleteBuilderResponse = z.string();\nexport type DeleteBuilderResponse = z.infer<typeof DeleteBuilderResponse>;\n\n/**\n * Profile update request.\n */\nexport const UpdateBuilderProfileRequest = z.object({\n  name: Name,\n});\nexport type UpdateBuilderProfileRequest = z.infer<\n  typeof UpdateBuilderProfileRequest\n>;\n\n/**\n * Profile update response.\n */\nexport const UpdateBuilderProfileResponse = z.string();\nexport type UpdateBuilderProfileResponse = z.infer<\n  typeof UpdateBuilderProfileResponse\n>;\n","import { z } from \"zod\";\nimport { Did } from \"#/common/types\";\n\n/**\n *\n */\nexport const Name = z.string().min(1).max(255);\nexport type Name = z.infer<typeof Name>;\n\n/**\n *\n */\nexport const ApiSuccessResponse = <T extends z.ZodType>(Schema: T) =>\n  z.object({\n    data: Schema,\n  });\n\n/**\n *\n */\nexport const ApiErrorResponse = z.object({\n  ts: z.iso.datetime(),\n  errors: z.string().array(),\n});\nexport type ApiErrorResponse = z.infer<typeof ApiErrorResponse>;\n\n/**\n * Generic ID path parameter.\n */\nexport const ByIdRequestParams = z.object({\n  id: z.uuid(),\n});\nexport type ByIdRequestParams = z.infer<typeof ByIdRequestParams>;\n\n/**\n * Access control list entry.\n */\nexport const Acl = z.object({\n  grantee: Did,\n  read: z.boolean(),\n  write: z.boolean(),\n  execute: z.boolean(),\n});\nexport type Acl = z.infer<typeof Acl>;\n","import { z } from \"zod\";\nimport { ApiSuccessResponse } from \"./common\";\n\n/**\n * Collection document data.\n */\nexport const CollectionDocumentDto = z.object({\n  id: z.uuid(),\n  type: z.enum([\"standard\", \"owned\"]),\n  name: z.string(),\n});\n\n/**\n * Collection documents array.\n */\nexport const CollectionDocuments = z.array(CollectionDocumentDto);\n\n/**\n * Collections list response.\n */\nexport const ListCollectionsResponse = ApiSuccessResponse(CollectionDocuments);\nexport type ListCollectionsResponse = z.infer<typeof ListCollectionsResponse>;\n\n/**\n * Collection index creation request.\n */\nexport const CreateCollectionIndexRequest = z.object({\n  collection: z.uuid(),\n  name: z.string().min(4),\n  keys: z.array(\n    z\n      .record(z.string(), z.union([z.literal(1), z.literal(-1)]))\n      .refine(\n        (obj) => Object.keys(obj).length === 1,\n        \"Each object must have exactly one key: [{ _id: 1 }, { foo: -1 }]\",\n      ),\n  ),\n  unique: z.boolean(),\n  ttl: z.number().optional(),\n});\nexport type CreateCollectionIndexRequest = z.infer<\n  typeof CreateCollectionIndexRequest\n>;\n\n/**\n * Collection index creation response.\n */\nexport const CreateCollectionIndexResponse = z.string();\nexport type CreateCollectionIndexResponse = z.infer<\n  typeof CreateCollectionIndexResponse\n>;\n\n/**\n * Drop collection index parameters.\n */\nexport const DropCollectionIndexParams = z.object({\n  id: z.uuid(),\n  name: z.string().min(4).max(50),\n});\n\nexport type DropCollectionIndexParams = z.infer<\n  typeof DropCollectionIndexParams\n>;\n\n/**\n * Drop collection index response.\n */\nexport const DropCollectionIndexResponse = z.string();\nexport type DropCollectionIndexResponse = z.infer<\n  typeof DropCollectionIndexResponse\n>;\n\n/**\n * Collection creation request.\n */\nexport const CreateCollectionRequest = z.object({\n  _id: z.uuid(),\n  type: z.union([z.literal(\"standard\"), z.literal(\"owned\")]),\n  name: z.string().min(1),\n  schema: z.record(z.string(), z.unknown()),\n});\nexport type CreateCollectionRequest = z.infer<typeof CreateCollectionRequest>;\n\n/**\n * Collection creation response.\n */\nexport const CreateCollectionResponse = z.string();\nexport type CreateCollectionResponse = z.infer<typeof CreateCollectionResponse>;\n\n/**\n * Collection deletion parameters.\n */\nexport const DeleteCollectionRequestParams = z.object({\n  id: z.uuid(),\n});\nexport type DeleteCollectionRequestParams = z.infer<\n  typeof DeleteCollectionRequestParams\n>;\n\n/**\n * Collection deletion response.\n */\nexport const DeleteCollectionResponse = z.string();\nexport type DeleteCollectionResponse = z.infer<typeof DeleteCollectionResponse>;\n\n/**\n * Collection metadata read parameters.\n */\nexport const ReadCollectionMetadataRequestParams = z.object({\n  id: z.uuid(),\n});\nexport type ReadCollectionMetadataRequestParams = z.infer<\n  typeof ReadCollectionMetadataRequestParams\n>;\n\n/**\n * Collection index data.\n */\nexport const CollectionIndexDto = z.object({\n  v: z.number(),\n  key: z.record(z.string(), z.union([z.string(), z.number()])),\n  name: z.string(),\n  unique: z.boolean(),\n});\n\n/**\n * Collection metadata data.\n */\nexport const CollectionMetadataDto = z.object({\n  _id: z.uuid(),\n  count: z.number(),\n  size: z.number(),\n  first_write: z.iso.datetime(),\n  last_write: z.iso.datetime(),\n  indexes: z.array(CollectionIndexDto),\n  schema: z.record(z.string(), z.unknown()),\n});\n\n/**\n * Collection metadata response.\n */\nexport const ReadCollectionMetadataResponse = ApiSuccessResponse(\n  CollectionMetadataDto,\n);\nexport type ReadCollectionMetadataResponse = z.infer<\n  typeof ReadCollectionMetadataResponse\n>;\n","import { z } from \"zod\";\nimport { Did } from \"#/common/types\";\nimport { ApiSuccessResponse } from \"./common\";\nimport { AclDto } from \"./users.dto\";\n\n/**\n * Owned data creation request.\n */\nexport const CreateOwnedDataRequest = z.object({\n  owner: Did,\n  collection: z.uuid(),\n  data: z.array(z.record(z.string(), z.unknown())).min(1),\n  acl: AclDto,\n});\nexport type CreateOwnedDataRequest = z.infer<typeof CreateOwnedDataRequest>;\n\n/**\n * Standard data creation request.\n */\nexport const CreateStandardDataRequest = z.object({\n  collection: z.uuid(),\n  data: z.array(z.record(z.string(), z.unknown())).min(1),\n});\nexport type CreateStandardDataRequest = z.infer<\n  typeof CreateStandardDataRequest\n>;\n\n/**\n * Data creation response.\n */\nexport const CreateDataResponse = ApiSuccessResponse(\n  z.object({\n    created: z.array(z.uuid()),\n    errors: z.array(\n      z.object({\n        error: z.string(),\n        document: z.unknown(),\n      }),\n    ),\n  }),\n);\nexport type CreateDataResponse = z.infer<typeof CreateDataResponse>;\n\n/**\n * Data update request.\n */\nexport const UpdateDataRequest = z.object({\n  collection: z.uuid(),\n  filter: z.record(z.string(), z.unknown()),\n  update: z.record(z.string(), z.unknown()),\n});\nexport type UpdateDataRequest = z.infer<typeof UpdateDataRequest>;\n\n/**\n * Data update response.\n */\nexport const UpdateDataResponse = ApiSuccessResponse(\n  z.object({\n    acknowledged: z.boolean(),\n    matched: z.number().int().min(0),\n    modified: z.number().int().min(0),\n    upserted: z.number().int().min(0),\n    upserted_id: z.string().nullable(),\n  }),\n);\nexport type UpdateDataResponse = z.infer<typeof UpdateDataResponse>;\n\n/**\n * Data find request.\n */\nexport const FindDataRequest = z.object({\n  collection: z.uuid(),\n  filter: z.record(z.string(), z.unknown()),\n});\nexport type FindDataRequest = z.infer<typeof FindDataRequest>;\n\n/**\n * Data find response.\n */\nexport const FindDataResponse = ApiSuccessResponse(\n  z.array(z.record(z.string(), z.unknown())),\n);\nexport type FindDataResponse = z.infer<typeof FindDataResponse>;\n\n/**\n * Data deletion request.\n */\nexport const DeleteDataRequest = z.object({\n  collection: z.uuid(),\n  filter: z\n    .record(z.string(), z.unknown())\n    .refine((obj) => Object.keys(obj).length > 0, \"Filter cannot be empty\"),\n});\nexport type DeleteDataRequest = z.infer<typeof DeleteDataRequest>;\n\n/**\n * Data deletion response.\n */\nexport const DeleteDataResponse = ApiSuccessResponse(\n  z.object({\n    acknowledged: z.boolean(),\n    deletedCount: z.number().int().min(0),\n  }),\n);\nexport type DeleteDataResponse = z.infer<typeof DeleteDataResponse>;\n\n/**\n * Data flush request.\n */\nexport const FlushDataRequest = z.object({\n  collection: z.uuid(),\n});\nexport type FlushDataRequest = z.infer<typeof FlushDataRequest>;\n\n/**\n * Data flush response.\n */\nexport const FlushDataResponse = z.string();\nexport type FlushDataResponse = z.infer<typeof FlushDataResponse>;\n\n/**\n * Data drop response.\n */\nexport const DropDataResponse = ApiSuccessResponse(\n  z.object({\n    acknowledged: z.boolean(),\n    deletedCount: z.number().int().min(0),\n  }),\n);\nexport type DropDataResponse = z.infer<typeof DropDataResponse>;\n\n/**\n * Data collection ID parameters.\n */\nexport const DataSchemaByIdRequestParams = z.object({\n  id: z.uuid(),\n});\nexport type DataSchemaByIdRequestParams = z.infer<\n  typeof DataSchemaByIdRequestParams\n>;\n\n/**\n * Data tail request parameters.\n */\nexport const TailDataRequestParams = z.object({\n  id: z.uuid(),\n});\nexport type TailDataRequestParams = z.infer<typeof TailDataRequestParams>;\n\n/**\n * Data tail query parameters.\n */\nexport const TailDataRequestQuery = z.object({\n  limit: z.coerce.number().max(1_000).optional().default(25),\n});\nexport type TailDataRequestQuery = z.infer<typeof TailDataRequestQuery>;\n\n/**\n * Data tail response.\n */\nexport const TailDataResponse = ApiSuccessResponse(\n  z.array(z.record(z.string(), z.unknown())),\n);\nexport type TailDataResponse = z.infer<typeof TailDataResponse>;\n","import { z } from \"zod\";\nimport { Did } from \"#/common/types\";\nimport { ApiSuccessResponse } from \"./common\";\n\n/**\n * Access control list entry.\n */\nexport const AclDto = z.object({\n  grantee: Did,\n  read: z.boolean(),\n  write: z.boolean(),\n  execute: z.boolean(),\n});\nexport type AclDto = z.infer<typeof AclDto>;\n\n/**\n * User profile data.\n */\nconst UserProfileData = z.object({\n  _id: Did,\n  _created: z.iso.datetime(),\n  _updated: z.iso.datetime(),\n  logs: z.array(\n    z.looseObject({\n      op: z.string(),\n      collection: z.uuid(),\n      // present when op is \"auth\"\n      acl: AclDto.optional(),\n    }),\n  ),\n  data: z.array(\n    z.object({\n      collection: z.uuid(),\n      id: z.uuid(),\n    }),\n  ),\n});\n\n/**\n * User profile response.\n */\nexport const ReadUserProfileResponse = ApiSuccessResponse(UserProfileData);\nexport type ReadUserProfileResponse = z.infer<typeof ReadUserProfileResponse>;\n\n/**\n * Data read request parameters.\n */\nexport const ReadDataRequestParams = z.object({\n  collection: z.uuid(),\n  document: z.uuid(),\n});\nexport type ReadDataRequestParams = z.infer<typeof ReadDataRequestParams>;\n\nconst OwnedDataDto = z\n  // Allow all keys through since each collection will follow a different schema\n  .looseObject({\n    _id: z.uuid(),\n    _created: z.iso.datetime(),\n    _updated: z.iso.datetime(),\n    _owner: Did,\n    _acl: z.array(AclDto),\n  });\n\nexport const ReadDataResponse = ApiSuccessResponse(OwnedDataDto);\nexport type ReadDataResponse = z.infer<typeof ReadDataResponse>;\n\n/**\n * Data document reference.\n */\nconst DataDocumentReference = z.object({\n  builder: Did,\n  collection: z.uuid(),\n  document: z.uuid(),\n});\n\n/**\n * User data references response.\n */\nexport const ListDataReferencesResponse = ApiSuccessResponse(\n  z.array(DataDocumentReference),\n);\n\nexport type ListDataReferencesResponse = z.infer<\n  typeof ListDataReferencesResponse\n>;\n\n/**\n * Data ACL read parameters.\n */\nexport const ReadDataAclRequestParams = z.object({\n  collection: z.uuid(),\n  document: z.uuid(),\n});\nexport type ReadDataAclRequestParams = z.infer<typeof ReadDataAclRequestParams>;\n\n/**\n * Data access response.\n */\nexport const ReadDataAccessResponse = ApiSuccessResponse(z.array(AclDto));\nexport type ReadDataAccessResponse = z.infer<typeof ReadDataAccessResponse>;\n\n/**\n * Grant data access request.\n */\nexport const GrantAccessToDataRequest = z.object({\n  collection: z.uuid(),\n  document: z.uuid(),\n  acl: AclDto,\n});\nexport type GrantAccessToDataRequest = z.infer<typeof GrantAccessToDataRequest>;\n\n/**\n * Grant data access response.\n */\nexport const GrantAccessToDataResponse = z.string();\nexport type GrantAccessToDataResponse = z.infer<\n  typeof GrantAccessToDataResponse\n>;\n\n/**\n * Revoke data access request.\n */\nexport const RevokeAccessToDataRequest = z.object({\n  grantee: Did,\n  collection: z.uuid(),\n  document: z.uuid(),\n});\nexport type RevokeAccessToDataRequest = z.infer<\n  typeof RevokeAccessToDataRequest\n>;\n\n/**\n * Revoke data access response.\n */\nexport const RevokeAccessToDataResponse = z.string();\nexport type RevokeAccessToDataResponse = z.infer<\n  typeof RevokeAccessToDataResponse\n>;\n\n/**\n * Document deletion parameters.\n */\nexport const DeleteDocumentRequestParams = z.object({\n  collection: z.uuid(),\n  document: z.uuid(),\n});\nexport type DeleteDocumentRequestParams = z.infer<\n  typeof DeleteDocumentRequestParams\n>;\n\n/**\n * Document deletion response.\n */\nexport const DeleteDocumentResponse = z.string();\nexport type DeleteDocumentResponse = z.infer<typeof DeleteDocumentResponse>;\n\n/**\n * Update user data request.\n */\nexport const UpdateUserDataRequest = z.object({\n  document: z.uuid(),\n  collection: z.uuid(),\n  update: z.record(z.string(), z.unknown()),\n});\nexport type UpdateUserDataRequest = z.infer<typeof UpdateUserDataRequest>;\n","import { z } from \"zod\";\nimport { ApiSuccessResponse } from \"./common\";\n\n/**\n * MongoDB aggregation pipeline variable validation.\n */\nconst PATH_EXPRESSION = /^\\$(\\.[$a-zA-Z][a-zA-Z0-9-_]+(\\[\\d+])*)+$/;\nconst VariablePath = z\n  .string()\n  .transform((path) => PATH_EXPRESSION.exec(path))\n  .refine((match) => match !== null, \"invalid PATH\")\n  // @ts-expect-error the refine previous checks for null\n  .transform((match) => match[0]);\n\n/**\n * Query variable configuration validator.\n */\nexport const QueryVariableValidator = z.object({\n  path: VariablePath,\n  description: z.string().optional(),\n});\n\n/**\n * Query creation request.\n */\nexport const CreateQueryRequest = z.object({\n  _id: z.uuid(),\n  name: z.string().min(1).max(100),\n  collection: z.uuid(),\n  variables: z.record(z.string(), QueryVariableValidator),\n  pipeline: z.array(z.record(z.string(), z.unknown())),\n});\nexport type CreateQueryRequest = z.infer<typeof CreateQueryRequest>;\n\n/**\n * Query creation response.\n */\nexport const CreateQueryResponse = z.string();\nexport type CreateQueryResponse = z.infer<typeof CreateQueryResponse>;\n\n/**\n * Query document response - returned by list/get operations.\n */\nconst QueryDocumentResponse = z.object({\n  _id: z.uuid(),\n  name: z.string().min(1).max(100),\n  collection: z.uuid(),\n});\n\n/**\n * Queries list response.\n */\nexport const ReadQueriesResponse = ApiSuccessResponse(\n  z.array(QueryDocumentResponse),\n);\nexport type ReadQueriesResponse = z.infer<typeof ReadQueriesResponse>;\n\n/**\n * Read query response.\n */\nexport const ReadQueryResponse = ApiSuccessResponse(QueryDocumentResponse);\nexport type ReadQueryResponse = z.infer<typeof ReadQueryResponse>;\n\n/**\n * Query deletion request.\n */\nexport const DeleteQueryRequest = z.object({\n  id: z.uuid(),\n});\nexport type DeleteQueryRequest = z.infer<typeof DeleteQueryRequest>;\n\n/**\n * Query deletion response.\n */\nexport const DeleteQueryResponse = z.string();\nexport type DeleteQueryResponse = z.infer<typeof DeleteQueryResponse>;\n\n/**\n * Query execution request.\n */\nexport const RunQueryRequest = z.object({\n  _id: z.uuid(),\n  variables: z.record(z.string(), z.unknown()),\n});\nexport type RunQueryRequest = z.infer<typeof RunQueryRequest>;\n\n/**\n * Query execution response.\n */\nexport const RunQueryResponse = ApiSuccessResponse(z.uuid());\nexport type RunQueryResponse = z.infer<typeof RunQueryResponse>;\n\n/**\n * Query execution status.\n */\nexport const RunQueryResultStatus = z.enum([\n  \"pending\",\n  \"running\",\n  \"complete\",\n  \"error\",\n]);\nexport type RunQueryResultStatus = z.infer<typeof RunQueryResultStatus>;\n\n/**\n * Query job data.\n */\nconst ReadQueryRunByIdDto = z.object({\n  _id: z.uuid(),\n  query: z.uuid(),\n  status: RunQueryResultStatus,\n  started: z.iso.datetime().optional(),\n  completed: z.iso.datetime().optional(),\n  result: z.unknown().optional(),\n  errors: z.array(z.string()).optional(),\n});\n\nexport const ReadQueryRunByIdResponse = ApiSuccessResponse(ReadQueryRunByIdDto);\nexport type ReadQueryRunByIdResponse = z.infer<typeof ReadQueryRunByIdResponse>;\n","import { Did as NucDid } from \"@nillion/nuc\";\nimport { z } from \"zod\";\nimport { NilDbEndpoint } from \"#/common/paths\";\nimport { isError, pause } from \"#/common/utils\";\nimport {\n  NodeHealthCheckResponse,\n  ReadAboutNodeResponse,\n} from \"#/dto/system.dto\";\nimport { Log } from \"#/logger\";\n\nexport const NilDbBaseClientOptions = z.object({\n  about: ReadAboutNodeResponse,\n  baseUrl: z.string().min(15),\n});\n\nexport type NilDbBaseClientOptions = z.infer<typeof NilDbBaseClientOptions>;\n\nexport type AuthenticatedRequestOptions = {\n  path: string;\n  token?: string;\n  method?: \"GET\" | \"POST\" | \"DELETE\";\n  body?: Record<string, unknown>;\n};\n\nexport class NilDbBaseClient {\n  #options: NilDbBaseClientOptions;\n\n  constructor(options: NilDbBaseClientOptions) {\n    this.#options = options;\n  }\n\n  get name(): string {\n    return this.#options.about.public_key.slice(-4);\n  }\n\n  get id(): NucDid {\n    return NucDid.fromHex(this.#options.about.public_key);\n  }\n\n  /**\n   * Handles error responses with consistent error information\n   */\n  private handleErrorResponse(\n    response: Response,\n    method: string,\n    path: string,\n    body: unknown,\n  ): never {\n    throw new Error(`Request failed: ${method} ${path}`, {\n      cause: {\n        body,\n        response,\n        status: response.status,\n        statusText: response.statusText,\n      },\n    });\n  }\n\n  /**\n   * Determines if an error is retryable based on its type\n   */\n  private isRetryableError(error: unknown): boolean {\n    if (isError(error)) {\n      const retryableNames = [\n        \"NetworkError\",\n        \"AbortError\",\n        \"TimeoutError\",\n        \"ERR_NETWORK\",\n        \"ECONNREFUSED\",\n        \"ECONNRESET\",\n        \"ETIMEDOUT\",\n        \"ENOTFOUND\",\n        \"EAI_AGAIN\",\n      ];\n\n      if (retryableNames.includes(error.name)) {\n        return true;\n      }\n\n      // Check error message for network-related issues\n      const message = error.message.toLowerCase();\n      if (\n        message.includes(\"network\") ||\n        message.includes(\"fetch failed\") ||\n        message.includes(\"connection refused\") ||\n        message.includes(\"timeout\")\n      ) {\n        return true;\n      }\n\n      // Check if it's a response error with retryable status\n      const cause = (error as { cause?: { status?: number } }).cause;\n      if (cause?.status) {\n        // Retry on 5xx errors and specific 4xx errors\n        return (\n          cause.status >= 500 || cause.status === 429 || cause.status === 408\n        );\n      }\n    }\n\n    return false;\n  }\n\n  /**\n   * Executes a fetch request with retry logic for network failures\n   */\n  private async fetchWithRetry(\n    endpoint: string,\n    fetchOptions: RequestInit,\n    context: string,\n    maxRetries = 5,\n  ): Promise<Response> {\n    let lastError: unknown;\n\n    for (let attempt = 1; attempt <= maxRetries; attempt++) {\n      try {\n        return await fetch(endpoint, fetchOptions);\n      } catch (error) {\n        lastError = error;\n\n        if (!this.isRetryableError(error) || attempt === maxRetries) {\n          Log.debug(\n            `${context} failed permanently after ${attempt} attempts: %O`,\n            error,\n          );\n          throw error;\n        }\n\n        const delay = Math.min(1000 * 2 ** (attempt - 1), 10000); // Exponential backoff with max 10s\n        Log.debug(\n          `${context} failed (attempt ${attempt}/${maxRetries}), retrying in ${delay}ms: %O`,\n          error,\n        );\n        await pause(delay);\n      }\n    }\n\n    throw lastError;\n  }\n\n  /**\n   * Makes an authenticated request to the NilDb API\n   */\n  async request<TSuccess>(options: {\n    path: string;\n    token?: string;\n    method?: \"GET\" | \"POST\" | \"DELETE\";\n    body?: Record<string, unknown>;\n    // biome-ignore lint/suspicious/noExplicitAny: these enable more ergonomic types in the test client\n    responseSchema: z.Schema<TSuccess, any, any>;\n  }): Promise<TSuccess> {\n    const { path, token, method = \"GET\", body, responseSchema } = options;\n\n    const headers: Record<string, string> = {};\n\n    if (token) {\n      headers.Authorization = `Bearer ${token}`;\n    }\n\n    if (body) {\n      headers[\"Content-Type\"] = \"application/json\";\n    }\n\n    const endpoint = new URL(path, this.#options.baseUrl).toString();\n    const context = `${method} ${path}`;\n\n    const response = await this.fetchWithRetry(\n      endpoint,\n      {\n        method,\n        headers,\n        ...(body && { body: JSON.stringify(body) }),\n      },\n      context,\n    );\n\n    const contentType = response.headers.get(\"content-type\") ?? \"\";\n    const status = response.status;\n\n    if (contentType.includes(\"application/json\")) {\n      const json = await response.json();\n      Log.debug({ endpoint, json, status }, \"Response was application/json\");\n\n      if (!response.ok) {\n        this.handleErrorResponse(response, method, endpoint, json);\n      }\n\n      return responseSchema.parse(json);\n    }\n\n    if (contentType.includes(\"text/plain\")) {\n      const text = await response.text();\n      Log.debug({ endpoint, text, status }, \"Response was text/plain\");\n\n      if (!response.ok) {\n        this.handleErrorResponse(response, method, path, text);\n      }\n\n      return responseSchema.parse(text);\n    }\n\n    Log.debug({ endpoint, status }, \"Response had no body\");\n    if (!response.ok) {\n      this.handleErrorResponse(response, method, path, null);\n    }\n\n    return responseSchema.parse(undefined);\n  }\n\n  /**\n   * Retrieves comprehensive node information including version and configuration\n   */\n  async aboutNode(): Promise<ReadAboutNodeResponse> {\n    return await this.request({\n      path: NilDbEndpoint.v1.system.about,\n      responseSchema: ReadAboutNodeResponse,\n    });\n  }\n\n  /**\n   * Checks node health status\n   */\n  async healthCheck(): Promise<\"OK\"> {\n    return await this.request({\n      path: NilDbEndpoint.v1.system.health,\n      responseSchema: NodeHealthCheckResponse,\n    });\n  }\n}\n","import { z } from \"zod\";\n\n/**\n * Node information response.\n */\nexport const ReadAboutNodeResponse = z.object({\n  started: z.iso.datetime(),\n  build: z.object({\n    time: z.iso.datetime(),\n    commit: z.string(),\n    version: z.string(),\n  }),\n  public_key: z.string(),\n  url: z.string().url(),\n  maintenance: z.object({\n    active: z.boolean(),\n    started_at: z.iso.datetime(),\n  }),\n});\n\nexport type ReadAboutNodeResponse = z.infer<typeof ReadAboutNodeResponse>;\n\n/**\n *\n */\nexport const NodeHealthCheckResponse = z.literal(\"OK\");\nexport type NodeHealthCheckResponse = z.infer<typeof NodeHealthCheckResponse>;\n","import {\n  type Command,\n  InvocationBody,\n  type Keypair,\n  type Did as NucDid,\n  NucTokenBuilder,\n  NucTokenEnvelopeSchema,\n} from \"@nillion/nuc\";\nimport { SecretVaultBaseClient, type SecretVaultBaseOptions } from \"#/base\";\nimport { Log } from \"#/logger\";\nimport {\n  type BlindfoldFactoryConfig,\n  toBlindfoldKey,\n} from \"./common/blindfold\";\nimport {\n  executeOnCluster,\n  prepareRequest,\n  processConcealedObjectResponse,\n  processPlaintextResponse,\n} from \"./common/cluster\";\nimport { NucCmd } from \"./common/nuc-cmd\";\nimport { type ByNodeName, Did } from \"./common/types\";\nimport { intoSecondsFromNow } from \"./common/utils\";\nimport type {\n  CreateDataResponse,\n  CreateOwnedDataRequest,\n} from \"./dto/data.dto\";\nimport type {\n  DeleteDocumentRequestParams,\n  DeleteDocumentResponse,\n  GrantAccessToDataRequest,\n  GrantAccessToDataResponse,\n  ListDataReferencesResponse,\n  ReadDataRequestParams,\n  ReadDataResponse,\n  ReadUserProfileResponse,\n  RevokeAccessToDataRequest,\n  RevokeAccessToDataResponse,\n} from \"./dto/users.dto\";\nimport {\n  createNilDbUserClient,\n  type NilDbUserClient,\n} from \"./nildb/user-client\";\n\nexport type SecretVaultUserOptions = SecretVaultBaseOptions<NilDbUserClient>;\n\n/**\n * Client for user operations on SecretVaults.\n *\n * This client handles user-specific operations for managing owned documents,\n * including creation, retrieval, updates, and deletion. It supports automatic\n * handling of concealed data when configured with blindfold.\n *\n * @example\n * ```typescript\n * const client = await SecretVaultUserClient.from({\n *   keypair: myKeypair,\n *   baseUrls: [\n *     'https://nildb-stg-n1.nillion.network',\n *     'https://nildb-stg-n2.nillion.network',\n *     'https://nildb-stg-n3.nillion.network',\n *   ],\n *   blindfold: { // optional blindfold config }\n * })\n * ```\n */\nexport class SecretVaultUserClient extends SecretVaultBaseClient<NilDbUserClient> {\n  /**\n   * Creates and initializes a new SecretVaultUserClient instance.\n   *\n   * @param options - Configuration options for the client\n   * @param options.keypair - The user's keypair for authentication\n   * @param options.baseUrls - URL Array of nilDB node endpoints\n   * @param options.blindfold - Optional blindfold configuration for concealed data\n   * @returns A promise that resolves to a configured SecretVaultUserClient\n   *\n   * @example\n   * ```typescript\n   * const client = await SecretVaultUserClient.from({\n   *   keypair: myKeypair,\n   *   baseUrls: [\n   *     'https://nildb-stg-n1.nillion.network',\n   *     'https://nildb-stg-n2.nillion.network',\n   *     'https://nildb-stg-n3.nillion.network',\n   *   ],\n   * });\n   * ```\n   */\n  static async from(options: {\n    keypair: Keypair;\n    baseUrls: string[];\n    blindfold?: BlindfoldFactoryConfig;\n  }): Promise<SecretVaultUserClient> {\n    const { baseUrls, keypair, blindfold } = options;\n\n    // Create clients\n    const clientPromises = baseUrls.map((u) => createNilDbUserClient(u));\n    const clients = await Promise.all(clientPromises);\n\n    let client: SecretVaultUserClient;\n    if (blindfold) {\n      if (\"key\" in blindfold) {\n        // User provided a key\n        client = new SecretVaultUserClient({\n          clients,\n          keypair,\n          key: blindfold.key,\n        });\n      } else {\n        // Create a new key\n        const key = await toBlindfoldKey({\n          ...blindfold,\n          clusterSize: clients.length,\n        });\n\n        client = new SecretVaultUserClient({\n          clients,\n          keypair,\n          key,\n        });\n      }\n    } else {\n      // No encryption\n      client = new SecretVaultUserClient({\n        clients,\n        keypair,\n      });\n    }\n\n    Log.info(\n      {\n        did: keypair.toDid().toString(),\n        nodes: clients.length,\n        encryption: client._options.key?.constructor.name ?? \"none\",\n      },\n      \"SecretVaultUserClient created\",\n    );\n\n    return client;\n  }\n\n  /**\n   * Reads the user's profile information from the cluster.\n   */\n  async readProfile(): Promise<ReadUserProfileResponse> {\n    const resultsByNode = await executeOnCluster(this.nodes, (client) => {\n      const token = this.mintInvocation({\n        command: NucCmd.nil.db.users.root,\n        audience: client.id,\n      });\n      return client.readProfile(token);\n    });\n\n    const result = processPlaintextResponse(resultsByNode);\n    Log.info({ user: this.id }, \"User profile read\");\n    return result;\n  }\n\n  /**\n   * Creates one or more data documents owned by the user.\n   */\n  async createData(\n    delegation: string,\n    body: CreateOwnedDataRequest,\n  ): Promise<ByNodeName<CreateDataResponse>> {\n    const { key, clients } = this._options;\n\n    // 1. Prepare map of node-id to node-specific payload.\n    const nodePayloads = await prepareRequest({ key, clients, body });\n\n    // 2. Execute on all nodes, looking up the payload by node id.\n    const result = await executeOnCluster(this.nodes, (client) => {\n      const envelop = NucTokenEnvelopeSchema.parse(delegation);\n      const token = NucTokenBuilder.extending(envelop)\n        .audience(client.id)\n        .command(NucCmd.nil.db.data.create)\n        .expiresAt(intoSecondsFromNow(60))\n        .body(new InvocationBody({}))\n        .build(this.keypair.privateKey());\n\n      const id = Did.parse(client.id.toString());\n      const payload = nodePayloads[id];\n      return client.createOwnedData(token, payload);\n    });\n\n    Log.info(\n      {\n        user: this.id,\n        collection: body.collection,\n        documents: body.data.length,\n        concealed: !!key,\n      },\n      \"User data created\",\n    );\n\n    return result;\n  }\n\n  /**\n   * Lists references to all data documents owned by the user.\n   */\n  async listDataReferences(): Promise<ListDataReferencesResponse> {\n    const resultsByNode = await executeOnCluster(this.nodes, (client) => {\n      const token = this.mintInvocation({\n        command: NucCmd.nil.db.users.read,\n        audience: client.id,\n      });\n      return client.listDataReferences(token);\n    });\n\n    const result = processPlaintextResponse(resultsByNode);\n\n    Log.info(\n      { user: this.id, count: result.data?.length || 0 },\n      \"User data references listed\",\n    );\n\n    return result;\n  }\n\n  /**\n   * Reads a single data document, automatically revealing concealed values if a key is configured.\n   */\n  async readData(params: ReadDataRequestParams): Promise<ReadDataResponse> {\n    // 1. Fetch the raw data from all nodes.\n    const resultsByNode = await executeOnCluster(this.nodes, (client) => {\n      const token = this.mintInvocation({\n        command: NucCmd.nil.db.users.read,\n        audience: client.id,\n      });\n      return client.readData(token, params);\n    });\n\n    const { key } = this._options;\n    let result: ReadDataResponse;\n\n    // 2. If a key is configured, process the results for concealed values and then reveal them\n    if (key) {\n      const data = await processConcealedObjectResponse({\n        key,\n        resultsByNode,\n      });\n      result = { data } as ReadDataResponse;\n    } else {\n      // 3. No key so process as plain text\n      result = processPlaintextResponse(resultsByNode);\n    }\n\n    Log.info(\n      {\n        user: this.id,\n        collection: params.collection,\n        document: params.document,\n      },\n      \"User data read\",\n    );\n\n    return result;\n  }\n\n  /**\n   * Deletes a user-owned document from all nodes.\n   */\n  async deleteData(\n    params: DeleteDocumentRequestParams,\n  ): Promise<ByNodeName<DeleteDocumentResponse>> {\n    const result = await executeOnCluster(this.nodes, (client) => {\n      const token = this.mintInvocation({\n        command: NucCmd.nil.db.users.delete,\n        audience: client.id,\n      });\n      return client.deleteData(token, params);\n    });\n\n    Log.info(\n      {\n        user: this.id,\n        collection: params.collection,\n        document: params.document,\n      },\n      \"User data deleted\",\n    );\n\n    return result;\n  }\n\n  /**\n   * Grants a given Did access to a given user-owned document.\n   */\n  async grantAccess(\n    body: GrantAccessToDataRequest,\n  ): Promise<ByNodeName<GrantAccessToDataResponse>> {\n    const result = await executeOnCluster(this.nodes, (client) => {\n      const token = this.mintInvocation({\n        command: NucCmd.nil.db.users.update,\n        audience: client.id,\n      });\n      return client.grantAccess(token, body);\n    });\n\n    Log.info(\n      {\n        user: this.id,\n        collection: body.collection,\n        document: body.document,\n        grantee: body.acl.grantee,\n      },\n      \"Data access granted\",\n    );\n\n    return result;\n  }\n\n  /**\n   * Revokes access for a given Did to the specified user-owned document.\n   */\n  async revokeAccess(\n    body: RevokeAccessToDataRequest,\n  ): Promise<ByNodeName<RevokeAccessToDataResponse>> {\n    const result = await executeOnCluster(this.nodes, (client) => {\n      const token = this.mintInvocation({\n        command: NucCmd.nil.db.users.update,\n        audience: client.id,\n      });\n      return client.revokeAccess(token, body);\n    });\n\n    Log.info(\n      {\n        user: this.id,\n        collection: body.collection,\n        document: body.document,\n        revokee: body.grantee,\n      },\n      \"Data access revoked\",\n    );\n\n    return result;\n  }\n\n  private mintInvocation(options: {\n    command: Command;\n    audience: NucDid;\n  }): string {\n    const builder = NucTokenBuilder.invocation({});\n\n    return builder\n      .command(options.command)\n      .subject(this.did)\n      .audience(options.audience)\n      .expiresAt(intoSecondsFromNow(60))\n      .build(this.keypair.privateKey());\n  }\n}\n","import { z } from \"zod\";\nimport { NilDbEndpoint } from \"#/common/paths\";\nimport {\n  CreateDataResponse,\n  type CreateOwnedDataRequest,\n} from \"#/dto/data.dto\";\nimport type { ReadAboutNodeResponse } from \"#/dto/system.dto\";\nimport {\n  type DeleteDocumentRequestParams,\n  DeleteDocumentResponse,\n  type GrantAccessToDataRequest,\n  GrantAccessToDataResponse,\n  ListDataReferencesResponse,\n  type ReadDataRequestParams,\n  ReadDataResponse,\n  ReadUserProfileResponse,\n  type RevokeAccessToDataRequest,\n  RevokeAccessToDataResponse,\n} from \"#/dto/users.dto\";\nimport { NilDbBaseClient, NilDbBaseClientOptions } from \"./base-client\";\n\nexport const NilDbUserClientOptions = z.object({\n  ...NilDbBaseClientOptions.shape,\n});\n\nexport type NilDbUserClientOptions = z.infer<typeof NilDbUserClientOptions>;\n\nexport class NilDbUserClient extends NilDbBaseClient {\n  // biome-ignore lint/correctness/noUnusedPrivateClassMembers: currently unused but useful to keep\n  #options: NilDbUserClientOptions;\n\n  constructor(options: NilDbUserClientOptions) {\n    super(options);\n    this.#options = options;\n  }\n\n  /**\n   * Retrieves the authenticated user's profile information.\n   */\n  readProfile(token: string): Promise<ReadUserProfileResponse> {\n    return this.request({\n      path: NilDbEndpoint.v1.users.me,\n      token,\n      responseSchema: ReadUserProfileResponse,\n    });\n  }\n\n  /**\n   * Lists all data records owned by the authenticated user.\n   */\n  listDataReferences(token: string): Promise<ListDataReferencesResponse> {\n    return this.request({\n      path: NilDbEndpoint.v1.users.data.root,\n      token,\n      responseSchema: ListDataReferencesResponse,\n    });\n  }\n\n  /**\n   * Create user-owned data in an owned collection\n   */\n  createOwnedData(\n    token: string,\n    body: CreateOwnedDataRequest,\n  ): Promise<CreateDataResponse> {\n    return this.request({\n      path: NilDbEndpoint.v1.data.createOwned,\n      method: \"POST\",\n      token,\n      body,\n      responseSchema: CreateDataResponse,\n    });\n  }\n\n  /**\n   * Retrieves user-owned data by collection and document id.\n   */\n  readData(\n    token: string,\n    params: ReadDataRequestParams,\n  ): Promise<ReadDataResponse> {\n    return this.request({\n      path: NilDbEndpoint.v1.users.data.byId\n        .replace(\":collection\", params.collection)\n        .replace(\":document\", params.document),\n      token,\n      responseSchema: ReadDataResponse,\n    });\n  }\n\n  /**\n   * Deletes a user-owned data document.\n   */\n  deleteData(\n    token: string,\n    params: DeleteDocumentRequestParams,\n  ): Promise<DeleteDocumentResponse> {\n    return this.request({\n      path: NilDbEndpoint.v1.users.data.byId\n        .replace(\":collection\", params.collection)\n        .replace(\":document\", params.document),\n      method: \"DELETE\",\n      token,\n      responseSchema: DeleteDocumentResponse,\n    });\n  }\n\n  /**\n   * Grants access to user-owned data.\n   */\n  grantAccess(\n    token: string,\n    body: GrantAccessToDataRequest,\n  ): Promise<GrantAccessToDataResponse> {\n    return this.request({\n      path: NilDbEndpoint.v1.users.data.acl.grant,\n      method: \"POST\",\n      body,\n      token,\n      responseSchema: GrantAccessToDataResponse,\n    });\n  }\n\n  /**\n   * Removes access to user-owned data.\n   */\n  revokeAccess(\n    token: string,\n    body: RevokeAccessToDataRequest,\n  ): Promise<RevokeAccessToDataResponse> {\n    return this.request({\n      path: NilDbEndpoint.v1.users.data.acl.revoke,\n      method: \"POST\",\n      body,\n      token,\n      responseSchema: RevokeAccessToDataResponse,\n    });\n  }\n}\n\nexport async function createNilDbUserClient(\n  baseUrl: string,\n): Promise<NilDbUserClient> {\n  const response = await fetch(`${baseUrl}/about`);\n  const about = (await response.json()) as ReadAboutNodeResponse;\n\n  const validated = NilDbUserClientOptions.parse({\n    about,\n    baseUrl,\n  });\n\n  return new NilDbUserClient(validated);\n}\n"],"mappings":"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","names":["encrypt","encrypt","z","z","z","z","z","z","z","z","z","z","z","z","z","z","z","z","z","InvocationBody","NucTokenBuilder","z","z","NucTokenBuilder","InvocationBody"]}